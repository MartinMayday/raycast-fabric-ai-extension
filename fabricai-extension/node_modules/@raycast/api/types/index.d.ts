/// <reference types="node" />
declare module "@raycast/api" {
  /// <reference types="node" />

/**
 * Closes the main Raycast window.
 *
 * @param options - Can be used to clear the root search. Defaults to not clearing the root search after
 * the window was closed.
 * @returns A Promise that resolves when the main window is closed.
 *
 * @example
 * ```typescript
 * 
 * 
 *
 * export default async () => {
 *   await setTimeout(1000);
 *   await closeMainWindow({ clearRootSearch: true });
 * };
 * ```
 */
export function closeMainWindow(options?: {
    clearRootSearch?: boolean;
}): Promise<void>;
/**
 * Pops the navigation stack back to root search.
 *
 * @param options - Can be used to clear the search bar. Defaults to clearing the search bar after popped to root.
 * @returns A Promise that resolves when Raycast popped to root.
 *
 * @example
 * ```typescript
 * 
 * 
 * 
 *
 * export default function Command() {
 *   useEffect(() => {
 *     setTimeout(() => {
 *       popToRoot({ clearSearchBar: true });
 *     }, 3000);
 *   }, []);
 *
 *   return <Detail markdown="See you soon 👋" />;
 * }
 * ```
 */
export function popToRoot(options?: {
    clearSearchBar?: boolean;
}): Promise<void>;
/**
 * Clear the text in the search bar.
 *
 * @param options - Can be used to force scrolling to the top. Defaults to scrolling to the top after the
 * the search bar was cleared.
 * @returns A Promise that resolves when the search bar is cleared.
 */
export function clearSearchBar(options?: {
    forceScrollToTop?: boolean;
}): Promise<void>;
/**
 * Utils
 */
/**
 * Shows a file or directory in the Finder.
 *
 * @param path - The path to show in the Finder.
 * @returns A Promise that resolves when the item is revealed in the Finder.
 *
 * @example
 * ```typescript
 * import { showInFinder } from "@raycast/api"
 * import { homedir } from "os"
 * import { join } from "path"
 * showInFinder(join(homedir(), "Downloads"))
 * ```
 */
export function showInFinder(path: PathLike): Promise<void>;
/**
 * Moves a file or directory to the Trash.
 *
 * @param paths - The item or items to move to the trash.
 * @returns A Promise that resolves when all files are moved to the trash.
 *
 * @example
 * ```typescript
 * 
 * 
 * 
 *
 * export default async () => {
 *   const file = `${homedir()}/Desktop/yolo.txt`;
 *   await writeFile(file, "I will be deleted soon!");
 *   await trash(file);
 * };
 * ```
 */
export function trash(path: PathLike | PathLike[]): Promise<void>;
/**
 * An object that represents a locally installed application on the system.
 *
 * @remarks
 * It can be used to open files or folders in a specific application. Use {@link getApplications} or
 * {@link getDefaultApplication} to get applications that can open a specific file or folder.
 */
export interface Application {
    /**
     * The display name of the application.
     */
    name: string;
    /**
     * The absolute path to the application bundle, e.g. `/Applications/Raycast.app`,
     */
    path: string;
    /**
     * The bundle identifier of the application, e.g. `com.raycast.macos`.
     */
    bundleId?: string;
}
/**
 * Returns all applications that can open the file.
 *
 * @param path The path of the file or folder to get the applications for. If no path is specified, all installed applications are returned.
 * @returns An array of {@link Application}.
 *
 * @example
 * ```typescript
 * 
 *
 * export default async () => {
 *   const installedApplications = await getApplications();
 *   console.log("The following applications are installed on your Mac:");
 *   console.log(installedApplications.map((a) => a.name).join(", "));
 * };
 * ```
 */
export function getApplications(path?: PathLike): Promise<Application[]>;
/**
 * Returns the default application that the file would be opened with.
 *
 * @param path The path of the file or folder to get the default application for.
 * @returns The default {@link Application} that would open the file. Throws an error if no application was found.
 *
 * @example
 * ```typescript
 * 
 *
 * export default async () => {
 *   const defaultApplication = await getDefaultApplication(__filename);
 *   console.log(`Default application for JavaScript is: ${defaultApplication.name}`);
 * };
 * ```
 */
export function getDefaultApplication(path: PathLike): Promise<Application>;
/**
 * Opens a target with the default application or specified application.
 *
 * @param target The file, folder or URL to open.
 * @param application The application name to use for opening the file. If no application is specified, the default application as determined by the system
 * is used to open the specified file. Note that you can use the application name, app identifier, or absolute path to the app.
 * @returns A Promise that resolves when the target has been opened.
 *
 * @example
 * ```typescript
 * 
 *
 * export default async () => {
 *   await open("https://www.raycast.com", "com.google.Chrome");
 * };
 * ```
 */
export function open(target: string, application?: Application | string): Promise<void>;
/**
 * Copies text to the clipboard.
 *
 * @param text - The text to copy to the clipboard.
 * @returns A Promise that resolves when the text is copied to the clipboard.
 *
 * @example
 * ```typescript
 * 
 *
 * export default async () => {
 *   await Clipboard.copy("https://raycast.com");
 * };
 * ```
 */
export function copy(text: string): Promise<void>;
/**
 * Clears the current clipboard contents.
 *
 * @returns A Promise that resolves when the clipboard is cleared.
 *
 * @example
 * ```typescript
 * 
 *
 * export default async () => {
 *   await Clipboard.clear();
 * };
 * ```
 */
export function clear(): Promise<void>;
/**
 * Pastes text to the current selection of the frontmost application.
 *
 * @param text - The text to insert at the cursor.
 * @returns A Promise that resolves when the text is pasted.
 *
 * @example
 * ```typescript
 * 
 *
 * export default async () => {
 *   await Clipboard.paste("I really like Raycast's API");
 * };
 * ```
 */
export function paste(text: string): Promise<void>;
/**
 * A keyboard shortcut is defined by one or more modifier keys (command, control, etc.) and a single key equivalent (a character or special key).
 * See {@link KeyModifier} and {@link KeyEquivalent} for supported values.
 *
 * @example
 * ```typescript
 * 
 *
 * export default function Command() {
 *   return (
 *     <Detail markdown="Let's play some games 👾" actions={
 *       <ActionPanel title="Game controls">
 *         <Action
 *           title="Up"
 *           shortcut={{ modifiers: ["opt"], key: "arrowUp" }}
 *           onAction={() => console.log("Go up")}
 *         />
 *         <Action
 *           title="Down"
 *           shortcut={{ modifiers: ["opt"], key: "arrowDown" }}
 *           onAction={() => console.log("Go down")}
 *         />
 *         <Action
 *           title="Left"
 *           shortcut={{ modifiers: ["opt"], key: "arrowLeft" }}
 *           onAction={() => console.log("Go left")}
 *         />
 *         <Action
 *           title="Right"
 *           shortcut={{ modifiers: ["opt"], key: "arrowRight" }}
 *           onAction={() => console.log("Go right")}
 *         />
 *       </ActionPanel>}
 *     />
 *   );
 * }
 * ```
 */
export interface Shortcut {
    /**
     * The modifier keys of the keyboard shortcut.
     */
    modifiers: KeyModifier[];
    /**
     * The key of the keyboard shortcut.
     */
    key: KeyEquivalent;
}
/**
 * Modifier of a {@link Shortcut}
 */
export type KeyModifier = "cmd" | "ctrl" | "opt" | "shift";
/**
 * KeyEquivalent of a {@link Shortcut}
 */
export type KeyEquivalent = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "." | "," | ";" | "=" | "+" | "-" | "[" | "]" | "{" | "}" | "«" | "»" | "(" | ")" | "/" | "\\" | "'" | "`" | "§" | "^" | "@" | "$" | "return" | "delete" | "deleteForward" | "tab" | "arrowUp" | "arrowDown" | "arrowLeft" | "arrowRight" | "pageUp" | "pageDown" | "home" | "end" | "space" | "escape" | "enter" | "backspace";
/**
 * Retrieve all stored values in the local storage of an extension.
 *
 * @returns A Promise that resolves with an object containing all {@link Values}.
 *
 * @example
 * ```typescript
 * 
 *
 * interface Values {
 *   todo: string;
 *   priority: number;
 * }
 *
 * export default async () => {
 *   const items = await LocalStorage.allItems<Values>();
 *   console.log(`Local storage item count: ${Object.entries(items).length}`);
 * };
 * ```
 */
export function allItems<T extends Values = Values>(): Promise<T>;
/**
 * Retrieve the stored value for the given key.
 *
 * @param key - The key you want to retrieve the value of.
 * @returns A Promise that resolves with the stored value for the given key. If the key does not exist, `undefined` is returned.
 *
 * @example
 * ```typescript
 * 
 *
 * export default async () => {
 *   const item = await LocalStorage.getItem<string>("favorite-fruit");
 *   console.log(item);
 * };
 * ```
 */
export function getItem<T extends Value = Value>(key: string): Promise<T | undefined>;
/**
 * Stores a value for the given key.
 *
 * @param key - The key you want to create or update the value of.
 * @param value - The value you want to create or update for the given key.
 * @returns A Promise that resolves when the value is stored.
 *
 * @example
 * ```typescript
 * 
 *
 * export default async () => {
 *   await LocalStorage.setItem("favorite-fruit", "cherry");
 * };
 * ```
 */
export function setItem(key: string, value: Value): Promise<void>;
/**
 * Removes the stored value for the given key.
 *
 * @param key - The key you want to remove the value of.
 * @returns A Promise that resolves when the value is removed.
 *
 * @example
 * ```typescript
 * 
 *
 * export default async () => {
 *   await LocalStorage.removeItem("favorite-fruit");
 * };
 * ```
 */
export function removeItem(key: string): Promise<void>;
/**
 * Removes all stored values of an extension.
 *
 * @returns A Promise that resolves when all values are removed.
 *
 * @example
 * ```typescript
 * 
 *
 * export default async () => {
 *   await LocalStorage.clear();
 * };
 * ```
 */
export function clear(): Promise<void>;
/**
 * Supported storage value types.
 *
 * @example
 * ```typescript
 * 
 *
 * export default async () => {
 *   // string
 *   await LocalStorage.setItem("favorite-fruit", "cherry");
 *
 *   // number
 *   await LocalStorage.setItem("fruit-basket-count", 3);
 *
 *   // boolean
 *   await LocalStorage.setItem("fruit-eaten-today", true);
 * };
 * ```
 */
export type Value = string | number | boolean;
/**
 * Values of local storage items.
 *
 * > For type-safe values, you can define your own interface. Use the keys of the local storage items as the property names.
 */
export interface Values {
    /**
     * The local storage value of a given key.
     */
    [key: string]: any;
}





/**
 * Exposes a list of actions that can be performed by the user.
 *
 * @remarks
 * Often items are context-aware, e.g. based on the selected list item. Actions can be grouped into semantic
 * section and can have keyboard shortcuts assigned.
 *
 * The first and second action become the primary and secondary action. They automatically get the default keyboard shortcuts assigned.
 * In {@link List} and {@link Detail}, this is `↵` for the primary and `⌘` `↵` for the secondary action. In {@link Form} it's `⌘` `↵` for the primary and
 * `⌘` `⇧` `↵` for the secondary.
 *
 * @example
 * ```typescript
 * 
 *
 * export default function Command() {
 *   return (
 *     <List navigationTitle="Open Pull Requests">
 *       <List.Item
 *         title="Docs: Update API Reference"
 *         subtitle="#1"
 *         actions={
 *           <ActionPanel title="#1 in raycast/extensions">
 *             <Action.OpenInBrowser url="https://github.com/raycast/extensions/pull/1" />
 *             <Action.CopyToClipboard
 *               title="Copy Pull Request URL"
 *               content="https://github.com/raycast/extensions/pull/1"
 *             />
 *           </ActionPanel>
 *         }
 *       />
 *     </List>
 *   );
 * }
 * ```
 */
export function ActionPanel(props: ActionPanel.Props): ReactElement<ActionPanel.Props>;
export namespace ActionPanel {
    var propTypes: {
        title: PropTypes.Requireable<string>;
    };
    var displayName: string;
}
/**
 * See {@link ActionPanel.Section}
 */
function ActionPanelSection(props: ActionPanel.Section.Props): ReactElement<ActionPanel.Section.Props>;
namespace ActionPanelSection {
    var propTypes: {
        title: PropTypes.Requireable<string>;
    };
    var displayName: string;
}
/**
 * See {@link ActionPanel.Submenu}
 */
function ActionPanelSubmenu(props: ActionPanel.Submenu.Props): ReactElement<Action.Props>;
namespace ActionPanelSubmenu {
    var propTypes: {
        id: PropTypes.Requireable<string>;
        title: PropTypes.Validator<string>;
        icon: PropTypes.Requireable<string | Required<PropTypes.InferProps<{
            fileIcon: PropTypes.Validator<string>;
        }>> | PropTypes.InferProps<{
            source: PropTypes.Requireable<string | PropTypes.InferProps<{
                light: PropTypes.Validator<string>;
                dark: PropTypes.Validator<string>;
            }>>;
            /**
             * Exposes a list of actions that can be performed by the user.
             *
             * @remarks
             * Often items are context-aware, e.g. based on the selected list item. Actions can be grouped into semantic
             * section and can have keyboard shortcuts assigned.
             *
             * The first and second action become the primary and secondary action. They automatically get the default keyboard shortcuts assigned.
             * In {@link List} and {@link Detail}, this is `↵` for the primary and `⌘` `↵` for the secondary action. In {@link Form} it's `⌘` `↵` for the primary and
             * `⌘` `⇧` `↵` for the secondary.
             *
             * @example
             * ```typescript
             * 
             *
             * export default function Command() {
             *   return (
             *     <List navigationTitle="Open Pull Requests">
             *       <List.Item
             *         title="Docs: Update API Reference"
             *         subtitle="#1"
             *         actions={
             *           <ActionPanel title="#1 in raycast/extensions">
             *             <Action.OpenInBrowser url="https://github.com/raycast/extensions/pull/1" />
             *             <Action.CopyToClipboard
             *               title="Copy Pull Request URL"
             *               content="https://github.com/raycast/extensions/pull/1"
             *             />
             *           </ActionPanel>
             *         }
             *       />
             *     </List>
             *   );
             * }
             * ```
             */
            fallback: PropTypes.Requireable<string | PropTypes.InferProps<{
                light: PropTypes.Validator<string>;
                dark: PropTypes.Validator<string>;
            }>>;
            mask: PropTypes.Requireable<Image.Mask>;
            tintColor: PropTypes.Requireable<string | PropTypes.InferProps<{
                light: PropTypes.Validator<string>;
                dark: PropTypes.Validator<string>;
                adjustContrast: PropTypes.Requireable<boolean>;
            }>>;
        }>>;
        shortcut: PropTypes.Requireable<Required<PropTypes.InferProps<{
            modifiers: PropTypes.Validator<string[]>;
            key: PropTypes.Validator<string>;
        }>>>;
    };
    var displayName: string;
}
export namespace ActionPanel {
    /**
     * @deprecated Use `Action` instead.
     */
    const Item: typeof Action;
    /**
     * A group of visually separated items.
     *
     * @remarks
     * Use sections if the {@link ActionPanel} contains a lot of actions to help guide the user to related actions.
     * For example, create a section for all copy actions.
     *
     * @example
     * ```typescript
     * 
     *
     * export default function Command() {
     *   return (
     *     <List navigationTitle="Open Pull Requests">
     *       <List.Item
     *         title="Docs: Update API Reference"
     *         subtitle="#1"
     *         actions={
     *           <ActionPanel title="#1 in raycast/extensions">
     *             <ActionPanel.Section title="Copy">
     *               <Action.CopyToClipboard title="Copy Pull Request Number" content="#1" />
     *               <Action.CopyToClipboard
     *                 title="Copy Pull Request URL"
     *                 content="https://github.com/raycast/extensions/pull/1"
     *               />
     *               <Action.CopyToClipboard title="Copy Pull Request Title" content="Docs: Update API Reference" />
     *             </ActionPanel.Section>
     *             <ActionPanel.Section title="Danger zone">
     *               <Action title="Close Pull Request" onAction={() => console.log("Close PR #1")} />
     *             </ActionPanel.Section>
     *           </ActionPanel>
     *         }
     *       />
     *     </List>
     *   );
     * }
     * ```
     */
    const Section: typeof ActionPanelSection;
    /**
     * An action that replaces the current ActionPanel with its children when selected.
     *
     * @remarks
     * This is handy when an action needs to select from a range of options. For example, to add a label to a GitHub pull request
     * or an assignee to a todo.
     *
     * @example
     * ```typescript
     * 
     *
     * export default function Command() {
     *   return (
     *     <List navigationTitle="Open Pull Requests">
     *       <List.Item
     *         title="Docs: Update API Reference"
     *         subtitle="#1"
     *         actions={
     *           <ActionPanel title="#1 in raycast/extensions">
     *             <ActionPanel.Submenu title="Add Label">
     *               <Action
     *                 icon={{ source: Icon.Circle, tintColor: Color.Red }}
     *                 title="Bug"
     *                 onAction={() => console.log("Add bug label")}
     *               />
     *               <Action
     *                 icon={{ source: Icon.Circle, tintColor: Color.Yellow }}
     *                 title="Enhancement"
     *                 onAction={() => console.log("Add enhancement label")}
     *               />
     *               <Action
     *                 icon={{ source: Icon.Circle, tintColor: Color.Blue }}
     *                 title="Help Wanted"
     *                 onAction={() => console.log("Add help wanted label")}
     *               />
     *             </ActionPanel.Submenu>
     *           </ActionPanel>
     *         }
     *       />
     *     </List>
     *   );
     * }
     * ```
     */
    const Submenu: typeof ActionPanelSubmenu;
    /**
     * Props of the {@link ActionPanel} React component.
     */
    interface Props {
        /**
         * Sections or Actions. If {@link Action} elements are specified, a default section is automatically created.
         */
        children?: ReactNode;
        /**
         * The title displayed at the top of the panel
         */
        title?: string;
    }
    /**
     * Supported children for the {@link ActionPanel} components.
     */
    type Children = ReactElement<ActionPanel.Section.Props> | ReactElement<ActionPanel.Section.Props>[] | ActionPanel.Section.Children | null;
    namespace Section {
        /**
         * Props of the {@link ActionPanel.Section} React component.
         */
        interface Props {
            /**
             * The item elements of the section.
             */
            children?: ReactNode;
            /**
             * Title displayed above the section
             */
            title?: string;
        }
        /**
         * Supported children for the {@link ActionPanel.Section} component.
         */
        type Children = ReactElement<Action.Props> | ReactElement<Action.Props>[] | ReactElement<ActionPanel.Submenu.Props> | Array<ReactElement<ActionPanel.Submenu.Props>> | Array<ReactElement<ActionPanel.Submenu.Props> | ReactElement<Action.Props>> | null;
    }
    namespace Submenu {
        /**
         * Props of the {@link ActionPanel.Submenu} React component.
         */
        interface Props {
            /**
             * ID of the submenu.
             * Make sure to assign each submenu a unique ID or a UUID will be auto-generated.
             */
            id?: string;
            /**
             * The title displayed for submenu.
             */
            title: string;
            /**
             * The icon displayed for the submenu.
             */
            icon?: Image.ImageLike;
            /**
             * The keyboard shortcut for the submenu.
             */
            shortcut?: Keyboard.Shortcut;
            /**
             * Items of the submenu.
             *
             * @example
             * ```typescript
             * <ActionPanel.Submenu title="Submenu">
             *    <Action title="Just an action" />
             * </ActionPanel.Submenu>
             * ```
             *
             * @remarks
             * If {@link Action} elements are specified, a default section is automatically created.\
             * Use {@link ActionPanel.Submenu} as parent when specifying sub-menu's children to make code is more readable.
             */
            children?: ReactNode;
        }
        /**
         * Supported children for the {@link ActionPanel.Submenu} components.
         */
        type Children = ActionPanel.Children;
    }
}
export {};



/**
 * Renders a markdown (CommonMark) string.
 *
 * @remarks
 * Typically used as a standalone view or when navigating from a {@link List}.
 *
 * @example
 * ```typescript
 * 
 *
 * export default function Command() {
 *   return <Detail markdown="**Hello** _World_!" />;
 * }
 * ```
 */
export function Detail(props: Detail.Props): ReactElement<Detail.Props>;
export namespace Detail {
    var propTypes: {
        navigationTitle: PropTypes.Requireable<string>;
        isLoading: PropTypes.Requireable<boolean>;
        markdown: PropTypes.Requireable<string>;
    };
    var displayName: string;
}
export namespace Detail {
    /**
     * Props of the {@link Detail} React component.
     */
    interface Props extends ActionsInterface, NavigationChildInterface {
        /**
         * The CommonMark string to be rendered.
         */
        markdown?: string | null;
        /** @deprecated - Use the `markdown` prop instead */
        children?: ReactNode;
    }
}




/**
 * Shows a list of form items such as {@link Form.TextField}, {@link Form.Checkbox} or {@link Form.Dropdown}.
 */
export function Form(props: Form.Props): ReactElement<Form.Props>;
export namespace Form {
    var propTypes: {
        submitTitle: PropTypes.Requireable<string>;
        navigationTitle: PropTypes.Requireable<string>;
        isLoading: PropTypes.Requireable<boolean>;
    };
    var displayName: string;
}
/**
 * See {@link Form.TextField}
 */
function FormTextField(props: Form.TextField.Props): ReactElement<Form.TextField.Props>;
namespace FormTextField {
    var propTypes: {
        id: PropTypes.Validator<string>;
        title: PropTypes.Requireable<string>;
        storeValue: PropTypes.Requireable<boolean>;
        value: PropTypes.Requireable<string>;
        defaultValue: PropTypes.Requireable<string>;
        placeholder: PropTypes.Requireable<string>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
    };
    var displayName: string;
}
/**
 * See {@link Form.PasswordField}
 */
function FormPasswordField(props: Form.PasswordField.Props): ReactElement<Form.PasswordField.Props>;
namespace FormPasswordField {
    var propTypes: {
        id: PropTypes.Validator<string>;
        title: PropTypes.Requireable<string>;
        storeValue: PropTypes.Requireable<boolean>;
        value: PropTypes.Requireable<string>;
        defaultValue: PropTypes.Requireable<string>;
        placeholder: PropTypes.Requireable<string>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
    };
    var displayName: string;
}
/**
 * See {@link Form.TextArea}
 */
function FormTextArea(props: Form.TextArea.Props): ReactElement<Form.TextArea.Props>;
namespace FormTextArea {
    var propTypes: {
        id: PropTypes.Validator<string>;
        title: PropTypes.Requireable<string>;
        storeValue: PropTypes.Requireable<boolean>;
        value: PropTypes.Requireable<string>;
        defaultValue: PropTypes.Requireable<string>;
        placeholder: PropTypes.Requireable<string>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
    };
    var displayName: string;
}
/**
 * See {@link Form.Checkbox}
 */
function FormCheckbox(props: Form.Checkbox.Props): ReactElement<Form.Checkbox.Props>;
namespace FormCheckbox {
    var propTypes: {
        id: PropTypes.Validator<string>;
        title: PropTypes.Requireable<string>;
        storeValue: PropTypes.Requireable<boolean>;
        value: PropTypes.Requireable<boolean>;
        defaultValue: PropTypes.Requireable<boolean>;
        label: PropTypes.Requireable<string>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
    };
    var displayName: string;
}
/**
 * See {@link Form.DatePicker}
 */
function FormDatePicker(props: Form.DatePicker.Props): ReactElement<Form.DatePicker.Props>;
namespace FormDatePicker {
    var propTypes: {
        id: PropTypes.Validator<string>;
        title: PropTypes.Requireable<string>;
        storeValue: PropTypes.Requireable<boolean>;
        value: PropTypes.Requireable<Date>;
        defaultValue: PropTypes.Requireable<Date>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
    };
    var displayName: string;
}
/**
 * See {@link Form.Separator}
 */
function FormSeparator(): ReactElement<Form.Separator.Props>;
namespace FormSeparator {
    var displayName: string;
}
/**
 * See {@link Form.Description}
 */
function FormDescription(props: Form.Description.Props): ReactElement<Form.Description.Props>;
namespace FormDescription {
    var propTypes: {
        text: PropTypes.Requireable<string>;
    };
    var displayName: string;
}
/**
 * See {@link Form.Dropdown}
 */
function FormDropdown(props: Form.Dropdown.Props): ReactElement<Form.Dropdown.Props>;
namespace FormDropdown {
    var propTypes: {
        id: PropTypes.Validator<string>;
        title: PropTypes.Requireable<string>;
        storeValue: PropTypes.Requireable<boolean>;
        value: PropTypes.Requireable<string>;
        defaultValue: PropTypes.Requireable<string>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
    };
    var displayName: string;
}
/**
 * See {@link Form.Dropdown.Section}
 */
function FormDropdownSection(props: Form.Dropdown.Section.Props): ReactElement<Form.Dropdown.Section.Props>;
namespace FormDropdownSection {
    var propTypes: {
        title: PropTypes.Requireable<string>;
    };
    var displayName: string;
}
/**
 * See {@link Form.Dropdown.Item}
 */
function FormDropdownItem(props: Form.Dropdown.Item.Props): ReactElement<Form.Dropdown.Item.Props>;
namespace FormDropdownItem {
    var propTypes: {
        value: PropTypes.Requireable<string>;
        title: PropTypes.Validator<string>;
        icon: PropTypes.Requireable<string | Required<PropTypes.InferProps<{
            fileIcon: PropTypes.Validator<string>;
        }>> | PropTypes.InferProps<{
            source: PropTypes.Requireable<string | PropTypes.InferProps<{
                light: PropTypes.Validator<string>;
                dark: PropTypes.Validator<string>;
            }>>;
            fallback: PropTypes.Requireable<string | PropTypes.InferProps<{
                light: PropTypes.Validator<string>;
                dark: PropTypes.Validator<string>;
            }>>;
            mask: PropTypes.Requireable<Image.Mask>;
            tintColor: PropTypes.Requireable<string | PropTypes.InferProps<{
                light: PropTypes.Validator<string>;
                dark: PropTypes.Validator<string>;
                adjustContrast: PropTypes.Requireable<boolean>;
            }>>;
        }>>;
    };
    var displayName: string;
}
/**
 * See {@link Form.TagPicker}
 */
function FormTagPicker(props: Form.TagPicker.Props): ReactElement<Form.TagPicker.Props>;
namespace FormTagPicker {
    var propTypes: {
        id: PropTypes.Validator<string>;
        title: PropTypes.Requireable<string>;
        storeValue: PropTypes.Requireable<boolean>;
        placeholder: PropTypes.Requireable<string>;
        value: PropTypes.Requireable<string[]>;
        defaultValue: PropTypes.Requireable<string[]>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
    };
    var displayName: string;
}
/**
 * See {@link Form.TagPicker.Item}
 */
function FormTagPickerItem(props: Form.TagPicker.Item.Props): ReactElement<Form.TagPicker.Item.Props>;
namespace FormTagPickerItem {
    var propTypes: {
        value: PropTypes.Validator<string>;
        title: PropTypes.Validator<string>;
        icon: PropTypes.Requireable<string | Required<PropTypes.InferProps<{
            fileIcon: PropTypes.Validator<string>;
        }>> | PropTypes.InferProps<{
            source: PropTypes.Requireable<string | PropTypes.InferProps<{
                light: PropTypes.Validator<string>;
                dark: PropTypes.Validator<string>;
            }>>;
            fallback: PropTypes.Requireable<string | PropTypes.InferProps<{
                light: PropTypes.Validator<string>;
                dark: PropTypes.Validator<string>;
            }>>;
            mask: PropTypes.Requireable<Image.Mask>;
            tintColor: PropTypes.Requireable<string | PropTypes.InferProps<{
                light: PropTypes.Validator<string>;
                dark: PropTypes.Validator<string>;
                adjustContrast: PropTypes.Requireable<boolean>;
            }>>;
        }>>;
    };
    var displayName: string;
}
namespace FormDropdown {
    /**
     * Visually separated group of dropdown items.
     *
     * @remarks
     * Use sections to group related menu items together.
     *
     * @example
     * ```typescript
     * 
     *
     * export default function Command() {
     *   return (
     *     <Form
     *       actions={
     *         <ActionPanel>
     *           <Action.SubmitForm title="Submit Favorite" onSubmit={(values) => console.log(values)} />
     *         </ActionPanel>
     *       }
     *     >
     *       <Form.Dropdown id="food" title="Favorite Food">
     *         <Form.Dropdown.Section title="Fruits">
     *           <Form.Dropdown.Item value="apple" title="Apple" icon="🍎" />
     *           <Form.Dropdown.Item value="banana" title="Banana" icon="🍌" />
     *         </Form.Dropdown.Section>
     *         <Form.Dropdown.Section title="Vegetables">
     *           <Form.Dropdown.Item value="broccoli" title="Broccoli" icon="🥦" />
     *           <Form.Dropdown.Item value="carrot" title="Carrot" icon="🥕" />
     *         </Form.Dropdown.Section>
     *       </Form.Dropdown>
     *     </Form>
     *   );
     * }
     * ```
     */
    const Section: typeof FormDropdownSection;
    /**
     * A dropdown item in a {@link Form.Dropdown}
     *
     * @example
     * ```typescript
     * 
     *
     * export default function Command() {
     *   return (
     *     <Form
     *       actions={
     *         <ActionPanel>
     *           <Action.SubmitForm title="Submit Icon" onSubmit={(values) => console.log(values)} />
     *         </ActionPanel>
     *       }
     *     >
     *       <Form.Dropdown id="icon" title="Icon">
     *         <Form.Dropdown.Item value="circle" title="Cirlce" icon={Icon.Circle} />
     *       </Form.Dropdown>
     *     </Form>
     *   );
     * }
     * ```
     */
    const Item: typeof FormDropdownItem;
}
namespace FormTagPicker {
    /**
     * A tag picker item in a {@link Form.TagPicker}.
     *
     * @example
     * ```typescript
     * 
     *
     * export default function Command() {
     *   return (
     *     <Form
     *       actions={
     *         <ActionPanel>
     *           <Action.SubmitForm title="Submit Color" onSubmit={(values) => console.log(values)} />
     *         </ActionPanel>
     *       }
     *     >
     *       <Form.TagPicker id="color" title="Color">
     *         <Form.TagPicker.Item value="red" title="Red" icon={{ source: Icon.Circle, tintColor: Color.Red }} />
     *         <Form.TagPicker.Item value="green" title="Green" icon={{ source: Icon.Circle, tintColor: Color.Green }} />
     *         <Form.TagPicker.Item value="blue" title="Blue" icon={{ source: Icon.Circle, tintColor: Color.Blue }} />
     *       </Form.TagPicker>
     *     </Form>
     *   );
     * }
     * ```
     */
    const Item: typeof FormTagPickerItem;
}
export namespace Form {
    /**
     * @deprecated Use `Form.Dropdown.Section` instead.
     */
    const DropdownSection: typeof FormDropdownSection;
    /**
     * @deprecated Use `Form.Dropdown.Item` instead.
     */
    const DropdownItem: typeof FormDropdownItem;
    /**
     * @deprecated Use `Form.TagPicker.Item` instead.
     */
    const TagPickerItem: typeof FormTagPickerItem;
    /**
     * A form item with a text field for input.
     *
     * @example
     * Uncontrolled text field
     *
     * ```typescript
     * 
     *
     * export default function Command() {
     *   return (
     *     <Form
     *       actions={
     *         <ActionPanel>
     *           <Action.SubmitForm title="Submit Name" onSubmit={(values) => console.log(values)} />
     *         </ActionPanel>
     *       }
     *     >
     *       <Form.TextField id="name" defaultValue="Steve" />
     *     </Form>
     *   );
     * }
     * ```
     *
     * @example
     * Controlled text field
     *
     * ```typescript
     * 
     * 
     *
     * export default function Command() {
     *   const [name, setName] = useState<string>();
     *
     *   return (
     *     <Form
     *       actions={
     *         <ActionPanel>
     *           <Action.SubmitForm title="Submit Name" onSubmit={(values) => console.log(values)} />
     *         </ActionPanel>
     *       }
     *     >
     *       <Form.TextField id="name" value={name} onChange={setName} />
     *     </Form>
     *   );
     * }
     * ```
     */
    const TextField: typeof FormTextField;
    /**
     * A form item with a text area for input.
     * The item supports multiline text entry.
     *
     * @example
     * Uncontrolled text area
     *
     * ```typescript
     * 
     *
     * const DESCRIPTION =
     *   "We spend too much time staring at loading indicators. The Raycast team is dedicated to make everybody interact faster with their computers.";
     *
     * export default function Command() {
     *   return (
     *     <Form
     *       actions={
     *         <ActionPanel>
     *           <Action.SubmitForm title="Submit Description" onSubmit={(values) => console.log(values)} />
     *         </ActionPanel>
     *       }
     *     >
     *       <Form.TextArea id="description" defaultValue={DESCRIPTION} />
     *     </Form>
     *   );
     * }
     * ```
     *
     * @example
     * Controlled text area
     *
     * ```typescript
     * 
     * 
     *
     * export default function Command() {
     *   const [description, setDescription] = useState<string>();
     *
     *   return (
     *     <Form
     *       actions={
     *         <ActionPanel>
     *           <Action.SubmitForm title="Submit Description" onSubmit={(values) => console.log(values)} />
     *         </ActionPanel>
     *       }
     *     >
     *       <Form.TextArea id="description" value={description} onChange={setDescription} />
     *     </Form>
     *   );
     * }
     * ```
     */
    const TextArea: typeof FormTextArea;
    /**
     * A form item with a checkbox.
     *
     * @example
     * Uncontrolled checkbox
     *
     * ```typescript
     * 
     *
     * export default function Command() {
     *   return (
     *     <Form
     *       actions={
     *         <ActionPanel>
     *           <Action.SubmitForm title="Submit Answer" onSubmit={(values) => console.log(values)} />
     *         </ActionPanel>
     *       }
     *     >
     *       <Form.Checkbox id="answer" label="Are you happy?" defaultValue={true} />
     *     </Form>
     *   );
     * }
     * ```
     *
     * @example
     * Controlled checkbox
     *
     * ```typescript
     * 
     * 
     *
     * export default function Command() {
     *   const [checked, setChecked] = useState(true);
     *
     *   return (
     *     <Form
     *       actions={
     *         <ActionPanel>
     *           <Action.SubmitForm title="Submit Answer" onSubmit={(values) => console.log(values)} />
     *         </ActionPanel>
     *       }
     *     >
     *       <Form.Checkbox id="answer" label="Do you like orange juice?" value={checked} onChange={setChecked} />
     *     </Form>
     *   );
     * }
     * ```
     */
    const Checkbox: typeof FormCheckbox;
    /**
     * A form item with a date picker.
     *
     * @example
     * Uncontrolled date picker
     *
     * ```typescript
     * 
     *
     * export default function Command() {
     *   return (
     *     <Form
     *       actions={
     *         <ActionPanel>
     *           <Action.SubmitForm title="Submit Form" onSubmit={(values) => console.log(values)} />
     *         </ActionPanel>
     *       }
     *     >
     *       <Form.DatePicker id="dateOfBirth" title="Date of Birth" defaultValue={new Date(1955, 1, 24)} />
     *     </Form>
     *   );
     * }
     * ```
     *
     * @example
     * Controlled date picker
     *
     * ```typescript
     * 
     * 
     *
     * export default function Command() {
     *   const [date, setDate] = useState<Date>();
     *
     *   return (
     *     <Form
     *       actions={
     *         <ActionPanel>
     *           <Action.SubmitForm title="Submit Form" onSubmit={(values) => console.log(values)} />
     *         </ActionPanel>
     *       }
     *     >
     *       <Form.DatePicker id="launchDate" title="Launch Date" value={date} onChange={setDate} />
     *     </Form>
     *   );
     * }
     * ```
     */
    const DatePicker: typeof FormDatePicker;
    /**
     * A form item that shows a separator line.
     * Use for grouping and visually separating form items.
     *
     * @example
     * ```typescript
     * 
     *
     * export default function Command() {
     *   return (
     *     <Form
     *       actions={
     *         <ActionPanel>
     *           <Action.SubmitForm title="Submit Form" onSubmit={(values) => console.log(values)} />
     *         </ActionPanel>
     *       }
     *     >
     *       <Form.TextField id="textfield" />
     *       <Form.Separator />
     *       <Form.TextArea id="textarea" />
     *     </Form>
     *   );
     * }
     * ```
     */
    const Separator: typeof FormSeparator;
    /**
     * A form item with a dropdown menu.
     *
     * @example
     * Uncontrolled dropdown
     *
     * ```typescript
     * 
     *
     * export default function Command() {
     *   return (
     *     <Form
     *       actions={
     *         <ActionPanel>
     *           <Action.SubmitForm title="Submit Favorite" onSubmit={(values) => console.log(values)} />
     *         </ActionPanel>
     *       }
     *     >
     *       <Form.Dropdown id="emoji" title="Favorite Emoji" defaultValue="lol">
     *         <Form.Dropdown.Item value="poop" title="Pile of poop" icon="💩" />
     *         <Form.Dropdown.Item value="rocket" title="Rocket" icon="🚀" />
     *         <Form.Dropdown.Item value="lol" title="Rolling on the floor laughing face" icon="🤣" />
     *       </Form.Dropdown>
     *     </Form>
     *   );
     * }
     * ```
     *
     * @example
     * Controlled dropdown
     *
     * ```typescript
     * 
     * 
     *
     * export default function Command() {
     *   const [programmingLanguage, setProgrammingLanguage] = useState<string>("typescript");
     *
     *   return (
     *     <Form
     *       actions={
     *         <ActionPanel>
     *           <Action.SubmitForm title="Submit Favorite" onSubmit={(values) => console.log(values)} />
     *         </ActionPanel>
     *       }
     *     >
     *       <Form.Dropdown
     *         id="dropdown"
     *         title="Favorite Language"
     *         value={programmingLanguage}
     *         onChange={setProgrammingLanguage}
     *       >
     *         <Form.Dropdown.Item value="cpp" title="C++" />
     *         <Form.Dropdown.Item value="javascript" title="JavaScript" />
     *         <Form.Dropdown.Item value="ruby" title="Ruby" />
     *         <Form.Dropdown.Item value="python" title="Python" />
     *         <Form.Dropdown.Item value="swift" title="Swift" />
     *         <Form.Dropdown.Item value="typescript" title="TypeScript" />
     *       </Form.Dropdown>
     *     </Form>
     *   );
     * }
     * ```
     */
    const Dropdown: typeof FormDropdown;
    /**
     * A form item with a tag picker that allows the user to select multiple items.
     *
     * @example
     * Uncontrolled tag picker
     *
     * ```typescript
     * 
     *
     * export default function Command() {
     *   return (
     *     <Form
     *       actions={
     *         <ActionPanel>
     *           <Action.SubmitForm title="Submit Favorite" onSubmit={(values) => console.log(values)} />
     *         </ActionPanel>
     *       }
     *     >
     *       <Form.TagPicker id="sports" title="Favorite Sports" defaultValue={["football"]}>
     *         <Form.TagPicker.Item value="basketball" title="Basketball" icon="🏀" />
     *         <Form.TagPicker.Item value="football" title="Football" icon="⚽️" />
     *         <Form.TagPicker.Item value="tennis" title="Tennis" icon="🎾" />
     *       </Form.TagPicker>
     *     </Form>
     *   );
     * }
     * ```
     *
     * @example
     * Controlled tag picker
     *
     * ```typescript
     * 
     * 
     *
     * export default function Command() {
     *   const [countries, setCountries] = useState<string[]>(["ger", "ned", "pol"]);
     *
     *   return (
     *     <Form
     *       actions={
     *         <ActionPanel>
     *           <Action.SubmitForm title="Submit Countries" onSubmit={(values) => console.log(values)} />
     *         </ActionPanel>
     *       }
     *     >
     *       <Form.TagPicker id="countries" title="Visited Countries" value={countries} onChange={setCountries}>
     *         <Form.TagPicker.Item value="ger" title="Germany" icon="🇩🇪" />
     *         <Form.TagPicker.Item value="ind" title="India" icon="🇮🇳" />
     *         <Form.TagPicker.Item value="ned" title="Netherlands" icon="🇳🇱" />
     *         <Form.TagPicker.Item value="nor" title="Norway" icon="🇳🇴" />
     *         <Form.TagPicker.Item value="pol" title="Poland" icon="🇵🇱" />
     *         <Form.TagPicker.Item value="rus" title="Russia" icon="🇷🇺" />
     *         <Form.TagPicker.Item value="sco" title="Scotland" icon="🏴󠁧󠁢󠁳󠁣󠁴󠁿" />
     *       </Form.TagPicker>
     *     </Form>
     *   );
     * }
     * ```
     */
    const TagPicker: typeof FormTagPicker;
    /**
     * A form item with a secure text field for password-entry in which the entered characters must be kept secret.
     *
     * @example
     * Uncontrolled password field
     *
     * ```typescript
     * 
     *
     * export default function Command() {
     *   return (
     *     <Form
     *       actions={
     *         <ActionPanel>
     *           <Action.SubmitFormAction title="Submit Password" onSubmit={(values) => console.log(values)} />
     *         </ActionPanel>
     *       }
     *     >
     *       <Form.PasswordField id="password" title="Enter Password" />
     *     </Form>
     *   );
     * }
     * ```
     *
     * @example
     * Controlled password field
     *
     * ```typescript
     * 
     * 
     *
     * export default function Command() {
     *   const [password, setPassword] = useState<string>();
     *
     *   return (
     *     <Form
     *       actions={
     *         <ActionPanel>
     *           <Action.SubmitForm title="Submit Password" onSubmit={(values) => console.log(values)} />
     *         </ActionPanel>
     *       }
     *     >
     *       <Form.PasswordField id="password" value={password} onChange={setPassword} />
     *     </Form>
     *   );
     * }
     * ```
     */
    const PasswordField: typeof FormPasswordField;
    /**
     * A form item with a simple text label.
     *
     * @remark Do *not* use this component to show validation messages for other form fields.
     *
     * @example
     * Label
     *
     * ```typescript
     * 
     *
     * export default function Command() {
     *   return (
     *     <Form
     *       actions={
     *         <ActionPanel>
     *           <Action.SubmitForm title="Submit" onSubmit={(values) => console.log(values)} />
     *         </ActionPanel>
     *       }
     *     >
     *       <Form.Description title="Import / Export" text="Exporting will back-up your preferences, quicklinks, snippets, floating notes, script-command folder paths, aliases, hotkeys, favorites and other data." />
     *     </Form>
     *   );
     * }
     * ```
     */
    const Description: typeof FormDescription;
    /**
     * Props of the {@link Form} React component.
     *
     * @category User Interface
     * @subcategory Form
     */
    interface Props extends ActionsInterface, NavigationChildInterface {
        /**
         * The Form.Item elements of the form.
         */
        children?: ReactNode;
    }
    /**
     * A possible form item value that will be used as an input for the submit callback of a form.
     */
    type Value = string | number | boolean | string[] | number[] | Date | null;
    /**
     * Values of items in the form.
     *
     * @remarks
     * For type-safe form values, you can define your own interface. Use the ID's of the form items
     * as the property names. See the example for more details.
     *
     * @example
     * ```typescript
     * 
     *
     * interface Values {
     *   todo: string;
     *   due?: Date;
     * }
     *
     * export default function Command() {
     *   function handleSubmit(values: Values) {
     *     console.log(values);
     *   }
     *
     *   return (
     *     <Form
     *        actions={
     *          <ActionPanel>
     *            <Action.SubmitForm title="Submit" onSubmit={handleSubmit} />
     *          </ActionPanel>
     *        }
     *     >
     *       <Form.TextField id="todo" title="Todo" />
     *       <Form.DatePicker id="due" title="Due Date" />
     *     </Form>
     *   );
     * };
     * ```
     */
    interface Values {
        /**
         * The form value of a given item.
         */
        [item: string]: any;
    }
    /**
     * Props of the Form.Item React component.
     */
    interface ItemProps<Value extends Form.Value> {
        /**
         * ID of the form item.
         * Make sure to assign each form item a unique id.
         */
        id: string;
        /**
         * The title displayed on the left side of the item.
         */
        title?: string;
        /**
         * Indicates whether the value of the item should be persisted after submitting, and restored next time the form is rendered.
         */
        storeValue?: boolean;
        /**
         * The current value of the item.
         */
        value?: Value;
        /**
         * The default value of the item.
         * Keep in mind that `defaultValue` will be configured once per component lifecycle. This means that if a user changes the value, `defaultValue` won't be configured on re-rendering.
         * @important If you're using {@link Form.Item.Props.storeValue} and configured it as `true` then the stored value will be set.
         * @important If you configure {@link Form.Item.Props.value} at the same time with {@link Form.Item.Props.defaultValue}, the `value` will be set instead of `defaultValue`.
         */
        defaultValue?: Value;
        /**
         * The callback which will be triggered on the {@link Form.Item.Props.value} change for the item.
         */
        onChange?: (newValue: Value) => void;
    }
    namespace TextField {
        /**
         * Props of the {@link Form.TextField} React component.
         */
        interface Props extends Form.ItemProps<string> {
            /**
             * Placeholder text shown in the text field.
             */
            placeholder?: string;
        }
    }
    namespace TextArea {
        /**
         * Props of the {@link Form.TextArea} React component.
         */
        interface Props extends Form.ItemProps<string> {
            /**
             * Placeholder text shown in the text field.
             */
            placeholder?: string;
        }
    }
    namespace Dropdown {
        /**
         * Props of the {@link Form.Dropdown} React component.
         * The {@link Form.Dropdown.Props.value} here is ID ({@link Form.Dropdown.Item.Props.id}) of the default selected item.
         */
        interface Props extends Form.ItemProps<string> {
            /**
             * Sections or items. If {@link Form.Dropdown.Item} elements are specified, a default section is automatically created.
             */
            children?: ReactNode;
        }
        namespace Section {
            /**
             * Props of the {@link Form.Dropdown.Section} React component.
             */
            interface Props {
                /**
                 * The item elements of the section.
                 */
                children?: ReactNode;
                /**
                 * Title displayed above the section
                 */
                title?: string;
            }
        }
        namespace Item {
            /**
             * Props of the {@link Form.Dropdown.Item} React component.
             */
            interface Props {
                /**
                 * Value of the dropdown item.
                 * Make sure to assign each unique value for each item.
                 */
                value: string;
                /**
                 * The title displayed for the item.
                 */
                title: string;
                /**
                 * A optional icon displayed for the item.
                 */
                icon?: Image.ImageLike;
            }
        }
    }
    namespace Checkbox {
        /**
         * Props of the {@link Form.Checkbox} React component.
         */
        interface Props extends Form.ItemProps<boolean> {
            /**
             * The label displayed on the right side of the checkbox.
             */
            label: string;
        }
    }
    namespace DatePicker {
        /**
         * Props of the {@link Form.DatePicker} React component.
         */
        interface Props extends Form.ItemProps<Date> {
        }
    }
    namespace Separator {
        /**
         * Props of the {@link Form.Separator} React component.
         */
        interface Props {
        }
    }
    namespace TagPicker {
        /**
         * Props of the {@link Form.TagPicker} React component.
         * The {@link Form.TagPicker.Props.value} here is the IDs ({@link Form.TagPicker.Item.Props.id}) of the default selected items.
         */
        interface Props extends Form.ItemProps<string[]> {
            /**
             * The list of tag picker's items.
             */
            children?: ReactNode;
            /**
             * Placeholder text shown in the token field.
             */
            placeholder?: string;
        }
        namespace Item {
            /**
             * Props of the {@link Form.TagPicker.Item} React component.
             */
            interface Props {
                /**
                 * Value of the tag picker item.
                 * Make sure to assign unique value for each item.
                 */
                value: string;
                /**
                 * The display title of the token.
                 */
                title: string;
                /**
                 * An icon to show in the token.
                 */
                icon?: Image.ImageLike;
            }
        }
    }
    namespace PasswordField {
        /**
         * Props of the {@link Form.PasswordField} React component.
         */
        interface Props extends Form.ItemProps<string> {
            /**
             * Placeholder text shown in the password field.
             */
            placeholder?: string;
        }
    }
    namespace Description {
        /**
         * Props of the {@link Form.Description} React component.
         */
        interface Props {
            /**
             * The display title of the left side from the description item.
             */
            title?: string;
            /**
             * Text that will be displayed in the middle.
             */
            text: string;
        }
    }
}
export {};




/**
 * Displays {@link List.Section} or {@link List.Item}.
 *
 * @remarks
 * The list uses built-in filtering by indexing the title of list items and additionally keywords.
 *
 * @example
 * ```typescript
 * 
 *
 * export default function Command() {
 *   return (
 *     <List navigationTitle="Search Beers" searchBarPlaceholder="Search your favorite beer">
 *       <List.Item title="Augustiner Helles" />
 *       <List.Item title="Camden Hells" />
 *       <List.Item title="Leffe Blonde" />
 *       <List.Item title="Sierra Nevada IPA" />
 *     </List>
 *   );
 * }
 * ```
 */
export function List(props: List.Props): ReactElement<List.Props>;
export namespace List {
    var propTypes: {
        selectedItemId: PropTypes.Requireable<string>;
        searchBarPlaceholder: PropTypes.Requireable<string>;
        throttle: PropTypes.Requireable<boolean>;
        onSearchTextChange: PropTypes.Requireable<(...args: any[]) => any>;
        onSelectionChange: PropTypes.Requireable<(...args: any[]) => any>;
    };
    var displayName: string;
}
/**
 * See {@link List.Section}
 */
function ListSection(props: List.Section.Props): ReactElement<List.Section.Props>;
namespace ListSection {
    var propTypes: {
        id: PropTypes.Requireable<string>;
        title: PropTypes.Requireable<string>;
        subtitle: PropTypes.Requireable<string>;
    };
    var displayName: string;
}
/**
 * See {@link List.Item}
 */
function ListItem(props: List.Item.Props): ReactElement<List.Item.Props>;
namespace ListItem {
    var propTypes: {
        id: PropTypes.Requireable<string>;
        title: PropTypes.Validator<string>;
        subtitle: PropTypes.Requireable<string>;
        accessoryTitle: PropTypes.Requireable<string>;
        keywords: PropTypes.Requireable<string[]>;
        icon: PropTypes.Requireable<string | Required<PropTypes.InferProps<{
            fileIcon: PropTypes.Validator<string>;
        }>> | PropTypes.InferProps<{
            source: PropTypes.Requireable<string | PropTypes.InferProps<{
                light: PropTypes.Validator<string>;
                dark: PropTypes.Validator<string>;
            }>>;
            fallback: PropTypes.Requireable<string | PropTypes.InferProps<{
                /**
                 * Displays {@link List.Section} or {@link List.Item}.
                 *
                 * @remarks
                 * The list uses built-in filtering by indexing the title of list items and additionally keywords.
                 *
                 * @example
                 * ```typescript
                 * 
                 *
                 * export default function Command() {
                 *   return (
                 *     <List navigationTitle="Search Beers" searchBarPlaceholder="Search your favorite beer">
                 *       <List.Item title="Augustiner Helles" />
                 *       <List.Item title="Camden Hells" />
                 *       <List.Item title="Leffe Blonde" />
                 *       <List.Item title="Sierra Nevada IPA" />
                 *     </List>
                 *   );
                 * }
                 * ```
                 */
                light: PropTypes.Validator<string>;
                dark: PropTypes.Validator<string>;
            }>>;
            /**
             * Displays {@link List.Section} or {@link List.Item}.
             *
             * @remarks
             * The list uses built-in filtering by indexing the title of list items and additionally keywords.
             *
             * @example
             * ```typescript
             * 
             *
             * export default function Command() {
             *   return (
             *     <List navigationTitle="Search Beers" searchBarPlaceholder="Search your favorite beer">
             *       <List.Item title="Augustiner Helles" />
             *       <List.Item title="Camden Hells" />
             *       <List.Item title="Leffe Blonde" />
             *       <List.Item title="Sierra Nevada IPA" />
             *     </List>
             *   );
             * }
             * ```
             */
            mask: PropTypes.Requireable<Image.Mask>;
            tintColor: PropTypes.Requireable<string | PropTypes.InferProps<{
                light: PropTypes.Validator<string>;
                dark: PropTypes.Validator<string>;
                adjustContrast: PropTypes.Requireable<boolean>;
            }>>;
        }>>;
    };
    var displayName: string;
}
export namespace List {
    /**
     * A item in the {@link List}.
     *
     * @remarks
     * This is one of the foundational UI components of Raycast. A list item represents a single entity. It can be a
     * GitHub pull request, a file, or anything else. You most likely want to perform actions on this item, so make it clear
     * to the user what this list item is about.
     *
     * @example
     * ```typescript
     * 
     *
     * export default function Command() {
     *   return (
     *     <List>
     *       <List.Item icon={Icon.Star} title="Augustiner Helles" subtitle="0,5 Liter" accessoryTitle="Germany" />
     *     </List>
     *   );
     * }
     * ```
     */
    const Item: typeof ListItem;
    /**
     * A group of related {@link List.Item}.
     *
     * @remarks
     * Sections are a great way to structure your list. For example, group GitHub issues with the same status and order them by priority.
     * This way, users can quickly access what is most relevant.
     *
     * @example
     * ```typescript
     * 
     *
     * export default function Command() {
     *   return (
     *     <List>
     *       <List.Section title="Lager">
     *         <List.Item title="Camden Hells" />
     *       </List.Section>
     *       <List.Section title="IPA">
     *         <List.Item title="Sierra Nevada IPA" />
     *       </List.Section>
     *     </List>
     *   );
     * }
     * ```
     */
    const Section: typeof ListSection;
    /**
     * Props of the {@link List} React component.
     */
    interface Props extends ActionsInterface, NavigationChildInterface {
        /**
         * List sections or items. If {@link List.Item} elements are specified, a default section is automatically created.
         */
        children?: ReactNode;
        /**
         * Callback triggered when the item selection in the list changes.
         */
        onSelectionChange?: (id?: string) => void;
        /**
         * Placeholder text that will be shown in the search bar.
         *
         * @defaultValue Search value...
         */
        searchBarPlaceholder?: string;
        /**
         * Selects the item with the specified id.
         */
        selectedItemId?: string;
        /**
         * Defines whether the {@link ListProps.onSearchTextChange} will be triggered on every keyboard press or with a delay for throttling the events.
         * Recommended to set to `true` when using custom filtering logic with asynchronous operations (e.g. network requests).
         * @defaultValue false
         */
        throttle?: boolean;
        /**
         * Callback triggered when the search bar text changes.
         * Note that built-in list filtering will be disabled when this callback is set.
         */
        onSearchTextChange?: (text: string) => void;
    }
    namespace Item {
        /**
         * Props of the {@link List.Item} React component.
         */
        interface Props extends ActionsInterface {
            /**
             * ID of the item.
             * Make sure to assign each item a unique ID or a UUID will be auto generated.
             */
            id?: string;
            /**
             * The main title displayed for that item.
             */
            title: string;
            /**
             * An optional subtitle displayed next to the main title.
             */
            subtitle?: string;
            /**
             * An additional title displayed for the item.
             */
            accessoryTitle?: string;
            /**
             * An optional property used for providing additional indexable strings for search.
             * When filtering the list in Raycast through the search bar, the keywords will be searched in addition to the title.
             */
            keywords?: string[];
            /**
             * A optional icon displayed for the list item.
             */
            icon?: Image.ImageLike;
            /**
             * A optional icon displayed as accessory for the list item.
             */
            accessoryIcon?: Image.ImageLike;
            /**
             * An {@link ActionPanel} that will be updated for the selected list item.
             */
            actions?: ReactNode | null;
        }
    }
    namespace Section {
        /**
         * Props of the {@link List.Section} React component.
         */
        interface Props {
            /**
             * The {@link List.Item} elements of the section.
             */
            children?: ReactNode;
            /**
             * ID of the section.
             * Make sure to assign each section a unique ID or a UUID will be auto generated.
             */
            id?: string;
            /**
             * Title displayed above the section.
             */
            title?: string;
            /**
             * An optional subtitle displayed next to the title of the section.
             */
            subtitle?: string;
        }
    }
}
export {};













/**
 * A context-specific action that can be performed by the user.
 *
 * @remarks
 * Assign keyboard shortcuts to items to make it easier for users to perform frequently used actions.
 *
 * @example
 * ```typescript
 * 
 *
 * export default function Command() {
 *   return (
 *     <List navigationTitle="Open Pull Requests">
 *       <List.Item
 *         title="Docs: Update API Reference"
 *         subtitle="#1"
 *         actions={
 *           <ActionPanel title="#1 in raycast/extensions">
 *             <Action.OpenInBrowser url="https://github.com/raycast/extensions/pull/1" />
 *             <Action.CopyToClipboard title="Copy Pull Request Number" content="#1" />
 *             <Action title="Close Pull Request" onAction={() => console.log("Close PR #1")} />
 *           </ActionPanel>
 *         }
 *       />
 *     </List>
 *   );
 * }
 * ```
 */
export function Action(props: Action.Props): ReactElement<Action.Props>;
export namespace Action {
    var propTypes: {
        id: PropTypes.Requireable<string>;
        title: PropTypes.Validator<string>;
        icon: PropTypes.Requireable<string | Required<PropTypes.InferProps<{
            fileIcon: PropTypes.Validator<string>;
        }>> | PropTypes.InferProps<{
            source: PropTypes.Requireable<string | PropTypes.InferProps<{
                light: PropTypes.Validator<string>;
                dark: PropTypes.Validator<string>;
            }>>;
            fallback: PropTypes.Requireable<string | PropTypes.InferProps<{
                light: PropTypes.Validator<string>;
                dark: PropTypes.Validator<string>;
            }>>;
            mask: PropTypes.Requireable<Image.Mask>;
            tintColor: PropTypes.Requireable<string | PropTypes.InferProps<{
                light: PropTypes.Validator<string>;
                dark: PropTypes.Validator<string>;
                adjustContrast: PropTypes.Requireable<boolean>;
            }>>;
        }>>;
        shortcut: PropTypes.Requireable<Required<PropTypes.InferProps<{
            modifiers: PropTypes.Validator<string[]>;
            key: PropTypes.Validator<string>;
        }>>>;
        onAction: PropTypes.Requireable<(...args: any[]) => any>;
    };
    var displayName: string;
}
export namespace Action {
    /**
     * Action that copies the content to the clipboard.
     *
     * @remarks
     * The main window is closed, and a HUD is shown after the content was copied to the clipboard.
     *
     * @example
     * ```typescript
     * 
     *
     * export default function Command() {
     *   return (
     *     <Detail
     *       markdown="Press `⌘ + .` and share some love."
     *       actions={
     *         <ActionPanel>
     *           <Action.CopyToClipboard content="I ❤️ Raycast" shortcut={{ modifiers: ["cmd"], key: "." }} />
     *         </ActionPanel>
     *       }
     *     />
     *   );
     * }
     * ```
     */
    const CopyToClipboard: typeof CopyToClipboardAction;
    /**
     * An action to open a file or folder with a specific application, just as if you had double-clicked the
     * file's icon.
     *
     * @remarks
     * The main window is closed after the file is opened.
     *
     * @example
     * ```typescript
     * 
     *
     * export default function Command() {
     *   return (
     *     <Detail
     *       markdown="Check out your extension code."
     *       actions={
     *         <ActionPanel>
     *           <Action.Open title="Open Folder" target={__dirname} />
     *         </ActionPanel>
     *       }
     *     />
     *   );
     * }
     * ```
     */
    const Open: typeof OpenAction;
    /**
     * Action that opens a URL in the default browser.
     *
     * @remarks
     * The main window is closed after the URL is opened in the browser.
     *
     * @example
     * ```typescript
     * 
     *
     * export default function Command() {
     *   return (
     *     <Detail
     *       markdown="Join the gang!"
     *       actions={
     *         <ActionPanel>
     *           <Action.OpenInBrowser url="https://raycast.com/jobs" />
     *         </ActionPanel>
     *       }
     *     />
     *   );
     * }
     * ```
     */
    const OpenInBrowser: typeof OpenInBrowserAction;
    /**
     * Action that opens a file or folder with a specific application.
     *
     * @remarks
     * The action opens a sub-menu with all applications that can open the file or folder.
     * The main window is closed after the file is opened in the specified application.
     *
     * @example
     * ```typescript
     * 
     * 
     *
     * const DESKTOP_DIR = `${homedir()}/Desktop`;
     *
     * export default function Command() {
     *   return (
     *     <Detail
     *       markdown="What do you want to use to open your desktop with?"
     *       actions={
     *         <ActionPanel>
     *           <Action.OpenWith path={DESKTOP_DIR} />
     *         </ActionPanel>
     *       }
     *     />
     *   );
     * }
     * ```
     */
    const OpenWith: typeof OpenWithAction;
    /**
     * Action that pastes the content to the front-most applications.
     *
     * @remarks
     * The main window is closed after the content is pasted to the front-most application.
     *
     * @example
     * ```typescript
     * 
     *
     * export default function Command() {
     *   return (
     *     <Detail
     *       markdown="Let us know what you think about the Raycast API?"
     *       actions={
     *         <ActionPanel>
     *           <Action.Paste content="api@raycast.com" />
     *         </ActionPanel>
     *       }
     *     />
     *   );
     * }
     * ```
     */
    const Paste: typeof PasteAction;
    /**
     * Action that pushes a new view to the navigation stack.
     *
     * @example
     * ```typescript
     * 
     *
     * function Ping() {
     *   return (
     *     <Detail
     *       markdown="Ping"
     *       actions={
     *         <ActionPanel>
     *           <Action.Push title="Push Pong" target={<Pong />} />
     *         </ActionPanel>
     *       }
     *     />
     *   );
     * }
     *
     * function Pong() {
     *   return <Detail markdown="Pong" />;
     * }
     *
     * export default function Command() {
     *   return <Ping />;
     * }
     * ```
     */
    const Push: typeof PushAction;
    /**
     * Action that shows a file or folder in the Finder.
     *
     * @remarks
     * The main window is closed after the file or folder is revealed in the Finder.
     *
     * @example
     * ```typescript
     * 
     * 
     *
     * const DOWNLOADS_DIR = `${homedir()}/Downloads`;
     *
     * export default function Command() {
     *   return (
     *     <Detail
     *       markdown="Are your downloads pilling up again?"
     *       actions={
     *         <ActionPanel>
     *           <Action.ShowInFinder path={DOWNLOADS_DIR} />
     *         </ActionPanel>
     *       }
     *     />
     *   );
     * }
     * ```
     */
    const ShowInFinder: typeof ShowInFinderAction;
    /**
     * Action that adds a submit handler for capturing form values.
     *
     * @example
     * ```typescript
     * 
     * 
     *
     * export default function Command() {
     *   const [name, setName] = useState<string>();
     *
     *   return (
     *     <Form
     *       actions={
     *         <ActionPanel>
     *           <Action.SubmitForm title="Submit Name" onSubmit={(values) => console.log(values)} />
     *         </ActionPanel>
     *       }
     *     >
     *       <Form.TextField id="name" value={name} onChange={setName} />
     *     </Form>
     *   );
     * }
     * ```
     */
    const SubmitForm: typeof SubmitFormAction;
    /**
     * Action that moves a file or folder to the Trash.
     *
     * @example
     * ```typescript
     * 
     * 
     *
     * const FILE = `${homedir()}/Downloads/get-rid-of-me.txt`;
     *
     * export default function Command() {
     *   return (
     *     <Detail
     *       markdown="Some spring cleaning?"
     *       actions={
     *         <ActionPanel>
     *           <Action.Trash paths={FILE} />
     *         </ActionPanel>
     *       }
     *     />
     *   );
     * }
     * ```
     */
    const Trash: typeof TrashAction;
    /**
     * Props of the {@link Action} React component.
     */
    interface Props {
        /**
         * ID of the item.
         *
         * @remarks
         * Make sure to assign each section or item a unique ID. If no ID is specified, a memoized auto-generated is used.
         */
        id?: string;
        /**
         * The title displayed for the item.
         */
        title: string;
        /**
         * The icon displayed for the action.
         */
        icon?: Image.ImageLike;
        /**
         * The keyboard shortcut for the item.
         */
        shortcut?: Keyboard.Shortcut;
        /**
         * Callback that is triggered when the item is selected.
         */
        onAction?: () => void;
    }
    namespace CopyToClipboard {
        /**
         * Props of the {@link Action.CopyToClipboard} React component.
         */
        type Props = CopyToClipboardActionProps;
    }
    namespace Open {
        /**
         * Props of the {@link Action.Open} React component.
         */
        type Props = OpenActionProps;
    }
    namespace OpenInBrowser {
        /**
         * Props of the {@link Action.OpenInBrowser} React component.
         */
        type Props = OpenInBrowserActionProps;
    }
    namespace OpenWith {
        /**
         * Props of the {@link Action.OpenWith} React component.
         */
        type Props = OpenWithActionProps;
    }
    namespace Paste {
        /**
         * Props of the {@link Action.Paste} React component.
         */
        type Props = PasteActionProps;
    }
    namespace Push {
        /**
         * Props of the {@link Action.Push} React component.
         */
        type Props = PushActionProps;
    }
    namespace ShowInFinder {
        /**
         * Props of the {@link Action.ShowInFinder} React component.
         */
        type Props = ShowInFinderActionProps;
    }
    namespace SubmitForm {
        /**
         * Props of the {@link Action.SubmitForm} React component.
         */
        type Props<T> = SubmitFormActionProps<T>;
    }
    namespace Trash {
        /**
         * Props of the {@link Action.Trash} React component.
         */
        type Props = TrashActionProps;
    }
}



/**
 * See {@link Action.CopyToClipboard.Props}
 */
export interface CopyToClipboardActionProps {
    /**
     * The contents that will be written to the clipboard as string.
     */
    content: string | number;
    /**
     * An optional title for the action.
     */
    title?: string;
    /**
     * A optional icon displayed for the item.
     * @defaultValue {@link Icon.Clipboard}
     */
    icon?: Image.ImageLike;
    /**
     * The keyboard shortcut for the action.
     */
    shortcut?: Keyboard.Shortcut;
    /**
     * Callback when the content was copied to clipboard.
     *
     * @remarks
     * This is handy when you want to act on the copied content, e.g. up-rank recently copied content.
     */
    onCopy?: (content: string | number) => void;
}
/**
 * See {@link Action.CopyToClipboard}
 */
export function CopyToClipboardAction(props: CopyToClipboardActionProps): ReactElement<CopyToClipboardActionProps>;
export namespace CopyToClipboardAction {
    var displayName: string;
}



/**
 * See {@link Action.Open.Props}
 */
export interface OpenActionProps {
    /**
     * The file, folder or URL to open.
     */
    target: string;
    /**
     * The application name to use for opening the file.
     *
     * @remarks
     * If no application is specified, the default application as determined by the system is used to open the
     * specified file. Note that you can use the application name, app identifier, or absolute path to the app.
     */
    application?: Application | string;
    /**
     * The title for the action.
     */
    title: string;
    /**
     * The icon displayed for the action.
     * @defaultValue {@link Icon.Finder}
     */
    icon?: Image.ImageLike;
    /**
     * The keyboard shortcut for the action.
     */
    shortcut?: Keyboard.Shortcut;
    /**
     * Callback when the file or folder was opened.
     *
     * @remarks
     * This is handy when you want to act on an opened file or folder, e.g. store a history of opened items.
     */
    onOpen?: (target: string) => void;
}
/**
 * See {@link Action.Open}
 */
export function OpenAction(props: OpenActionProps): ReactElement<OpenActionProps>;
export namespace OpenAction {
    var displayName: string;
}



/**
 * See {@link Action.OpenInBrowser.Props}
 */
export interface OpenInBrowserActionProps {
    /**
     * The URL to open.
     */
    url: string;
    /**
     * An optional title for the action.
     */
    title?: string;
    /**
     * The icon displayed for the action.
     * @defaultValue {@link Icon.Globe}
     */
    icon?: Image.ImageLike;
    /**
     * The optional keyboard shortcut for the menu item
     */
    shortcut?: Keyboard.Shortcut;
    /**
     * Callback when the URL was opened in the browser.
     *
     * @remarks
     * This is handy when you want to act on the opened link, e.g. store a history of visited links.
     */
    onOpen?: (url: string) => void;
}
/**
 * See {@link Action.OpenInBrowser}
 */
export function OpenInBrowserAction(props: OpenInBrowserActionProps): ReactElement<OpenInBrowserActionProps>;
export namespace OpenInBrowserAction {
    var displayName: string;
}
export namespace OpenInBrowserAction {
    type Props = OpenInBrowserActionProps;
}



/**
 * See {@link Action.OpenWith.Props}
 */
export interface OpenWithActionProps {
    /**
     * The path to open.
     */
    path: string;
    /**
     * The title for the action.
     * @defaultValue Open With
     */
    title?: string;
    /**
     * The icon displayed for the action.
     * @defaultValue {@link Icon.Upload}
     */
    icon?: Image.ImageLike;
    /**
     * The keyboard shortcut for the action.
     */
    shortcut?: Keyboard.Shortcut;
    /**
     * Callback when the file or folder was opened.
     *
     * @remarks
     * This is handy when you want to act on an opened file or folder, e.g. store a history of opened items.
     */
    onOpen?: (path: string) => void;
}
/**
 * See {@link Action.OpenWith}
 */
export function OpenWithAction(props: OpenWithActionProps): ReactElement<OpenWithActionProps>;
export namespace OpenWithAction {
    var displayName: string;
}



/**
 * See {@link Action.Paste.Props}
 */
export interface PasteActionProps {
    /**
     * The contents that will be written to the clipboard as string.
     */
    content: string | number;
    /**
     * An optional title for the action.
     */
    title?: string;
    /**
     * The icon displayed for the action.
     * @defaultValue {@link Icon.Clipboard}
     */
    icon?: Image.ImageLike;
    /**
     * The keyboard shortcut for the action.
     */
    shortcut?: Keyboard.Shortcut;
    /**
     * Callback when the content was pasted into the front-most application.
     *
     * @remarks
     * This is handy when you want to act on the pasted content, e.g. up-rank recently pasted content.
     */
    onPaste?: (content: string | number) => void;
}
/**
 * See {@link Action.Paste.Props}
 */
export function PasteAction(props: PasteActionProps): ReactElement<PasteActionProps>;
export namespace PasteAction {
    var displayName: string;
}



/**
 * See {@link Action.Push.Props}
 */
export interface PushActionProps {
    /**
     * The title displayed for the item.
     */
    title: string;
    /**
     * The target view that will be pushed to the navigation stack.
     */
    target: ReactNode;
    /**
     * The icon displayed for the action.
     */
    icon?: Image.ImageLike;
    /**
     * The keyboard shortcut for the action.
     */
    shortcut?: Keyboard.Shortcut;
    /**
     * Callback when the target view was pushed.
     *
     * @remarks
     * This is handy when you want to act on the pushed target view, e.g. uprank a selected list item.
     */
    onPush?: () => void;
}
/**
 * See {@link Action.Push.Props}
 */
export function PushAction(props: PushActionProps): ReactElement<PushActionProps>;
export namespace PushAction {
    var displayName: string;
}
/// <reference types="node" />




/**
 * See {@link Action.ShowInFinder.Props}
 */
export interface ShowInFinderActionProps {
    /**
     * The path to open.
     */
    path: PathLike;
    /**
     * An optional title for the action.
     * @defaultValue Show in Finder
     */
    title?: string;
    /**
     * A optional icon displayed for the item.
     * @defaultValue {@link Icon.Finder}
     */
    icon?: Image.ImageLike;
    /**
     * The keyboard shortcut for the action.
     */
    shortcut?: Keyboard.Shortcut;
    /**
     * Callback when the file or folder was shown in the Finder.
     *
     * @remarks
     * This is handy when you want to act on revealed files or folders, e.g. up-rank recently opened items.
     */
    onShow?: (path: PathLike) => void;
}
/**
 * See {@link Action.ShowInFinder.Props}
 */
export function ShowInFinderAction(props: ShowInFinderActionProps): ReactElement<ShowInFinderActionProps>;
export namespace ShowInFinderAction {
    var displayName: string;
}




/**
 * See {@link Action.SubmitForm.Props}
 */
export interface SubmitFormActionProps<Values> {
    /**
     * The title displayed for the item.
     */
    title?: string;
    /**
     * The icon displayed for the action.
     */
    icon?: Image.ImageLike;
    /**
     * The keyboard shortcut for the action.
     */
    shortcut?: Keyboard.Shortcut;
    /**
     * Callback that is triggered when the submit was submitted.
     * Use the handler to perform custom validation logic and call other Raycast API methods.
     * The handler receives a the values object containing the user input.
     */
    onSubmit?: (input: Values) => void;
}
/**
 * See {@link Action.SubmitForm.Props}
 */
export function SubmitFormAction<Values extends Form.Values = Form.Values>(props: SubmitFormActionProps<Values>): ReactElement<SubmitFormActionProps<Values>>;
export namespace SubmitFormAction {
    var displayName: string;
}
/// <reference types="node" />




/**
 * See {@link Action.Trash.Props}
 */
export interface TrashActionProps {
    /**
     * The item or items to move to the trash.
     */
    paths: PathLike | PathLike[];
    /**
     * An optional title for the action.
     * @defaultValue Move to Trash
     */
    title?: string;
    /**
     * A optional icon displayed for the action.
     * @defaultValue {@link Icon.Trash}
     */
    icon?: Image.ImageLike;
    /**
     * The optional keyboard shortcut for the action.
     */
    shortcut?: Keyboard.Shortcut;
    /**
     * Callback when all items were moved to the trash.
     *
     * @remarks
     * This is handy when you want to act on a trashed item, e.g. update a list.
     * The callback returns the same `paths` as passed originally.
     */
    onTrash?: (paths: PathLike | PathLike[]) => void;
}
/**
 * See {@link Action.Trash}
 */
export function TrashAction(props: TrashActionProps): ReactElement<TrashActionProps>;
export namespace TrashAction {
    var displayName: string;
}

/**
 * Views that can be embedded in a navigation stack, show a navigation title and support a loading bar.
 * @category User Interface
 */
export interface NavigationChildInterface {
    /**
     *
     * The main title for that view displayed in Raycast
     *
     * @defaultValue Command title
     */
    navigationTitle?: string;
    /**
     * Indicates whether a loading bar should be shown or hidden below the search bar
     *
     * @defaultValue false
     */
    isLoading?: boolean;
}
/**
 * Components that support an Action Panel.
 * @category User Interface
 */
export interface ActionsInterface {
    /**
     * A reference to an {@link ActionPanel}.
     */
    actions?: ReactNode;
}





/*********************************
 * Deprecated on v1.28.0
 *********************************/
/**
 * @deprecated Use `Clipboard.copy` instead
 */
export const copyTextToClipboard: typeof Clipboard.copy;
/**
 * @deprecated Use `Clipboard.clear` instead
 */
export const clearClipboard: typeof Clipboard.clear;
/**
 * @deprecated Use `Clipboard.paste` instead
 */
export const pasteText: typeof Clipboard.paste;
/**
 * @deprecated Use `LocalStorage.allItems` instead
 */
export const allLocalStorageItems: typeof LocalStorage.allItems;
/**
 * @deprecated Use `LocalStorage.getItem` instead
 */
export const getLocalStorageItem: typeof LocalStorage.getItem;
/**
 * @deprecated Use `LocalStorage.setItem` instead
 */
export const setLocalStorageItem: typeof LocalStorage.setItem;
/**
 * @deprecated Use `LocalStorage.removeItem` instead
 */
export const removeLocalStorageItem: typeof LocalStorage.removeItem;
/**
 * @deprecated Use `LocalStorage.clear` instead
 */
export const clearLocalStorage: typeof LocalStorage.clear;
/**
 * @deprecated Use `LocalStorage.Value` instead
 */
export type LocalStorageValue = LocalStorage.Value;
/**
 * @deprecated Use `LocalStorage.Values` instead
 */
export interface LocalStorageValues extends LocalStorage.Values {
}
/**
 * @deprecated Use `Keyboard.Shortcut` instead
 */
export interface KeyboardShortcut extends Keyboard.Shortcut {
}
/**
 * @deprecated Use `Keyboard.specialKeys` instead
 */
export const specialKeys: Record<string, string>;
/**
 * @deprecated Use `Keyboard.KeyModifier` instead
 */
export type KeyModifier = Keyboard.KeyModifier;
/**
 * @deprecated Use `Keyboard.KeyEquivalent` instead
 */
export type KeyEquivalent = Keyboard.KeyEquivalent;
/**
 * @deprecated Use `getPreferenceValues()` instead.
 */
export type Preferences = _Preferences;
/**
 * @deprecated Use `getPreferenceValues()` instead.
 */
export interface Preference extends _Preference {
}
/**
 * @deprecated Use `getPreferenceValues()` instead.
 */
export const preferences: _Preferences;
/**
 * @deprecated Use `Action.CopyToClipboard` instead.
 */
export const CopyToClipboardAction: typeof import("./components/actions/CopyToClipboardAction").CopyToClipboardAction;
/**
 * @deprecated Use `Action.CopyToClipboard.Props` instead.
 */
export interface CopyToClipboardActionProps extends Action.CopyToClipboard.Props {
}
/**
 * @deprecated Use `Action.Open` instead.
 */
export const OpenAction: typeof import("./components/actions/OpenAction").OpenAction;
/**
 * @deprecated Use `Action.Open.Props` instead.
 */
export interface OpenActionProps extends Action.Open.Props {
}
/**
 * @deprecated Use `Action.OpenInBrowserIn` instead.
 */
export const OpenInBrowserAction: typeof import("./components/actions/OpenInBrowserAction").OpenInBrowserAction;
/**
 * @deprecated Use `Action.OpenInBrowser.Props` instead.
 */
export interface OpenInBrowserActionProps extends Action.OpenInBrowser.Props {
}
/**
 * @deprecated Use `Action.OpenWith` instead.
 */
export const OpenWithAction: typeof import("./components/actions/OpenWithAction").OpenWithAction;
/**
 * @deprecated Use `Action.OpenWith.Props` instead.
 */
export interface OpenWithActionProps extends Action.OpenWith.Props {
}
/**
 * @deprecated Use `Action.Paste` instead.
 */
export const PasteAction: typeof import("./components/actions/PasteAction").PasteAction;
/**
 * @deprecated Use `Action.Paste.Props` instead.
 */
export interface PasteActionProps extends Action.Paste.Props {
}
/**
 * @deprecated Use `Action.Push` instead.
 */
export const PushAction: typeof import("./components/actions/PushAction").PushAction;
/**
 * @deprecated Use `Action.Push.Props` instead.
 */
export interface PushActionProps extends Action.Push.Props {
}
/**
 * @deprecated Use `Action.ShowInFinder` instead.
 */
export const ShowInFinderAction: typeof import("./components/actions/ShowInFinderAction").ShowInFinderAction;
/**
 * @deprecated Use `Action.ShowInFinder.Props` instead.
 */
export interface ShowInFinderActionProps extends Action.ShowInFinder.Props {
}
/**
 * @deprecated Use `Action.SubmitForm` instead.
 */
export const SubmitFormAction: typeof import("./components/actions/SubmitFormAction").SubmitFormAction;
/**
 * @deprecated Use `Action.SunmitForm.Props` instead.
 */
export interface SubmitFormActionProps<T> extends Action.SubmitForm.Props<T> {
}
/**
 * @deprecated Use `Action.Trash` instead.
 */
export const TrashAction: typeof import("./components/actions/TrashAction").TrashAction;
/**
 * @deprecated Use `Action.Trash.Props` instead.
 */
export interface TrashActionProps extends Action.Trash.Props {
}
/**
 * @deprecated Use `ActionPanel.Props` instead.
 */
export interface ActionPanelProps extends ActionPanel.Props {
}
/**
 * @deprecated Use `ActionPanel.Children` instead.
 */
export type ActionPanelChildren = ActionPanel.Children;
/**
 * @deprecated Use `Action` instead.
 */
export const ActionPanelItem: typeof Action;
/**
 * @deprecated Use `Action.Props` instead.
 */
export interface ActionPanelItemProps extends Action.Props {
}
/**
 * @deprecated Use `ActionPanel.Submenu` instead.
 */
export const ActionPanelSubmenu: typeof ActionPanel.Submenu;
/**
 * @deprecated Use `ActionPanel.Submenu.Props` instead.
 */
export interface ActionPanelSubmenuProps extends ActionPanel.Submenu.Props {
}
/**
 * @deprecated Use `ActionPanel.Section` instead.
 */
export const ActionPanelSection: typeof ActionPanel.Section;
/**
 * @deprecated Use `ActionPanel.Section.Props` instead.
 */
export interface ActionPanelSectionProps extends ActionPanel.Section.Props {
}
/**
 * @deprecated Use `ActionPanel.Section.Children` instead.
 */
export type ActionPanelSectionChildren = ActionPanel.Section.Children;
/**
 * @deprecated Use `Detail.Props` instead.
 */
export interface DetailProps extends Detail.Props {
}
/**
 * @deprecated Use `Form.Value` instead.
 */
export type FormValue = Form.Value;
/**
 * @deprecated Use `Form.Values` instead.
 */
export interface FormValues extends Form.Values {
}
/**
 * @deprecated Use `Form.Props` instead.
 */
export interface FormProps extends Form.Props {
}
/**
 * @deprecated Use `Form.ItemProps` instead.
 */
export interface FormItemProps<Value extends Form.Value> extends Form.ItemProps<Value> {
}
/**
 * @deprecated Use `Form.Dropdown.Section` instead.
 */
export const FormDropdownSection: typeof Form.Dropdown.Section;
/**
 * @deprecated Use `Form.Dropdown.Section.Props` instead.
 */
export interface FormDropdownSectionProps extends Form.Dropdown.Section.Props {
}
/**
 * @deprecated Use `Form.Dropdown.Item` instead.
 */
export const FormDropdownItem: typeof Form.Dropdown.Item;
/**
 * @deprecated Use `Form.Dropdown.Item.Props` instead.
 */
export interface FormDropdownItemProps extends Form.Dropdown.Item.Props {
}
/**
 * @deprecated Use `Form.TagPicker.Item` instead.
 */
export const FormTagPickerItem: typeof Form.TagPicker.Item;
/**
 * @deprecated Use `Form.TagPicker.Item.Props` instead.
 */
export interface FormTagPickerItemProps extends Form.TagPicker.Item.Props {
}
/**
 * @deprecated Use `Form.TextField` instead.
 */
export const FormTextField: typeof Form.TextField;
/**
 * @deprecated Use `Form.TextField.Props` instead.
 */
export interface FormTextFieldProps extends Form.TextField.Props {
}
/**
 * @deprecated Use `Form.TextArea` instead.
 */
export const FormTextArea: typeof Form.TextArea;
/**
 * @deprecated Use `Form.TextArea.Props` instead.
 */
export interface FormTextAreaProps extends Form.TextArea.Props {
}
/**
 * @deprecated Use `Form.Checkbox` instead.
 */
export const FormCheckbox: typeof Form.Checkbox;
/**
 * @deprecated Use `Form.Checkbox.Props` instead.
 */
export interface FormCheckboxProps extends Form.Checkbox.Props {
}
/**
 * @deprecated Use `Form.DatePicker` instead.
 */
export const FormDatePicker: typeof Form.DatePicker;
/**
 * @deprecated Use `Form.DatePicker.Props` instead.
 */
export interface FormDatePickerProps extends Form.DatePicker.Props {
}
/**
 * @deprecated Use `Form.Separator` instead.
 */
export const FormSeparator: typeof Form.Separator;
/**
 * @deprecated Use `Form.Separator.Props` instead.
 */
export interface FormSeparatorProps extends Form.Separator.Props {
}
/**
 * @deprecated Use `Form.Dropdown` instead.
 */
export const FormDropdown: typeof Form.Dropdown;
/**
 * @deprecated Use `Form.Dropdown.Props` instead.
 */
export interface FormDropdownProps extends Form.Dropdown.Props {
}
/**
 * @deprecated Use `Form.TagPicker` instead.
 */
export const FormTagPicker: typeof Form.TagPicker;
/**
 * @deprecated Use `Form.TagPicker.Props` instead.
 */
export interface FormTagPickerProps extends Form.TagPicker.Props {
}
/**
 * @deprecated Use `List.Props` instead.
 */
export interface ListProps extends List.Props {
}
/**
 * @deprecated Use `List.Section` instead.
 */
export const ListSection: typeof List.Section;
/**
 * @deprecated Use `List.Section.Props` instead.
 */
export interface ListSectionProps extends List.Section.Props {
}
/**
 * @deprecated Use `List.item` instead.
 */
export const ListItem: typeof List.Item;
/**
 * @deprecated Use `List.Item.Props` instead.
 */
export interface ListItemProps extends List.Item.Props {
}
/**
 * @deprecated Add `nanoid` as a dependency and use it instead.
 */
export const randomId: typeof _randomId;
/**
 * @deprecated
 */
export const useId: typeof _useId;
/**
 * @deprecated
 */
export const useActionPanel: typeof _useActionPanel;
/**
 * @deprecated
 */
export interface ActionPanelState extends _ActionPanelState {
}
/**
 * @deprecated Use `Alert.Options` instead
 */
export interface AlertOptions extends Alert.Options {
}
/**
 * @deprecated Use `Alert.ActionOptions` instead
 */
export interface AlertActionOptions extends Alert.ActionOptions {
}
/**
 * @deprecated Use `Alert.ActionStyle` instead
 */
export const AlertActionStyle: typeof Alert.ActionStyle;
/**
 * @deprecated Use `Toast.Options` instead
 */
export interface ToastOptions extends _Toast.Options {
}
/**
 * @deprecated Use `Toast.ActionOptions` instead
 */
export interface ToastActionOptions extends _Toast.ActionOptions {
}
/**
 * @deprecated Use `Toast.Style` instead
 */
export const ToastStyle: typeof _Toast.Style;
/**
 * @deprecated Use `Image.ImageLike` instead
 */
export type ImageLike = Image.ImageLike;
/**
 * @deprecated Use `Image.Source` instead
 */
export type ImageSource = Image.Source;
/**
 * @deprecated Use `Image.Mask` instead
 */
export type ImageMask = Image.Mask;
/**
 * @deprecated Use `Image.Mask` instead
 */
export const ImageMask: typeof Image.Mask;
/**
 * @deprecated Use `Color.Dynamic` instead
 */
export type DynamicColor = Color.Dynamic;
/**
 * @deprecated Use `Color.ColorLike` instead
 */
export type ColorLike = Color.ColorLike;
/**
 * @deprecated Use `export default function Command() { ... }` instead
 */
export const render: typeof _render;
/**
 * Holds data about the environment the command is running in. Use the global {@link environment} object to retrieve values.
 */
export interface Environment {
    /**
     * The version of the main Raycast app
     */
    raycastVersion: string;
    /**
     * The name of the extension, as specified in package.json
     */
    extensionName: string;
    /**
     * The name of the launched command, as specified in package.json
     */
    commandName: string;
    /**
     * The absolute path to the assets directory of the extension.
     *
     * @remarks
     * This directory is used internally to load icons, images, and other bundled assets.
     */
    assetsPath: string;
    /**
     * The absolute path for the support directory of an extension. Use it to read and write files related to your extension or command.
     */
    supportPath: string;
    /**
     * Indicates whether the command is a development command (vs. an installed command from the Store).
     */
    isDevelopment: boolean;
}
/**
 * Contains environment values such as the Raycast version, extension info, and paths.
 *
 * @example
 * ```typescript
 * 
 *
 * console.log(`Raycast version: ${environment.raycastVersion}`);
 * console.log(`Extension name: ${environment.extensionName}`);
 * console.log(`Command name: ${environment.commandName}`);
 * console.log(`Assets path: ${environment.assetsPath}`);
 * console.log(`Support path: ${environment.supportPath}`);
 * console.log(`Is development mode: ${environment.isDevelopment}`);
 * ```
 */
export const environment: Environment;
/**
 * Values of preference items.
 */
export interface PreferenceValues {
    [name: string]: any;
}
/**
 * A function to access the preference values that have been passed to the command.
 *
 * @returns An object with the preference names as property key and the typed value as property value.
 *
 * @remarks
 * Each preference name is mapped to its value and the defined default values are used as fallback values.
 *
 * @example
 * ```typescript
 * 
 *
 * interface Preferences {
 *   name: string;
 *   bodyWeight?: string;
 *   bodyHeight?: string;
 * }
 *
 * export default async () => {
 *   const preferences = getPreferenceValues<Preferences>();
 *   console.log(preferences);
 * };
 * ```
 */
export function getPreferenceValues<Values extends PreferenceValues = PreferenceValues>(): Values;
/**
 * Gets the selected text of the frontmost application.
 *
 * @throws An error when no text is selected in the frontmost application.
 * @returns A Promise that resolves with the selected text.
 *
 * @example
 * ```typescript
 * 
 *
 * export default async () => {
 *   try {
 *     const selectedText = await getSelectedText();
 *     const transformedText = selectedText.toUpperCase();
 *     await Clipboard.paste(transformedText);
 *   } catch (error) {
 *     await showToast({
 *       style: Toast.Style.Failure,
 *       title: "Cannot transform text",
 *       message: String(error)
 *     });
 *   }
 * };
 * ```
 */
export function getSelectedText(): Promise<string>;
/**
 * Holds data about a File System item. Use the {@link getSelectedFinderItems} method to retrieve values.
 */
export interface FileSystemItem {
    /**
     * The path to the item
     */
    path: string;
}
/**
 * Gets the selected items from Finder.
 *
 * @throws An error when Finder is not the frontmost application.
 * @returns A Promise that resolves with the selected file system items.
 *
 * @example
 * ```typescript
 * 
 *
 * export default async () => {
 *   try {
 *     const selectedItems = await getSelectedFinderItems();
 *     if (selectedItems.length) {
 *       await Clipboard.paste(selectedItems[0].path);
 *     }
 *   } catch (error) {
 *     await showToast({
 *       style: Toast.Style.Failure,
 *       title: "Cannot copy file path",
 *       message: String(error)
 *     });
 *   }
 * };
 * ```
 */
export function getSelectedFinderItems(): Promise<FileSystemItem[]>;

/**
 * Return type of the {@link useNavigation} hook to perform push and pop actions.
 */
export interface Navigation {
    /**
     * Push a new view component to the navigation stack.
     *
     * @param component - The React component to push to the navigation stack.
     */
    push: (component: ReactNode) => void;
    /**
     * Pop current view component from the navigation stack.
     */
    pop: () => void;
}
/**
 * A hook that lets you push and pop view components in the navigation stack.
 *
 * @remarks
 * You most likely won't use this hook too often. To push a new component, use the {@link PushAction}.
 * When a user presses `ESC`, we automatically push to the previous component.
 *
 * @returns A {@link Navigation} object with {@link Navigation.push} and {@link Navigation.pop} functions.
 * Use the functions to alter the navigation stack.
 *
 * @example
 * ```typescript
 * 
 *
 * function Ping() {
 *   const { push } = useNavigation();
 *
 *   return (
 *     <Detail
 *       markdown="Ping"
 *       actions={
 *         <ActionPanel>
 *           <Action title="Push" onAction={() => push(<Pong />)} />
 *         </ActionPanel>
 *       }
 *     />
 *   );
 * }
 *
 * function Pong() {
 *   const { pop } = useNavigation();
 *
 *   return (
 *     <Detail
 *       markdown="Pong"
 *       actions={
 *         <ActionPanel>
 *           <Action title="Pop" onAction={pop} />
 *         </ActionPanel>
 *       }
 *     />
 *   );
 * }
 *
 * export default function Command() {
 *   return <Ping />;
 * }
 * ```
 */
export function useNavigation(): Navigation;
/// <reference types="react" />

const Portal: import("react").MemoExoticComponent<({ name: _providedName, hostName, handleOnMount, handleOnUnmount, children, }: PortalProps) => any>;
export default Portal;


const PortalHost: React.MemoExoticComponent<({ name }: PortalHostProps) => JSX.Element>;
export default PortalHost;


const PortalProvider: React.MemoExoticComponent<({ children }: PortalProviderProps) => JSX.Element>;
export default PortalProvider;
/// <reference types="react" />


export const PortalStateContext: import("react").Context<Record<string, PortalType[]>>;
export const PortalDispatchContext: import("react").Context<import("react").Dispatch<ActionTypes>>;

export const usePortal: (hostName?: string) => {
    registerHost: () => void;
    deregisterHost: () => void;
    addPortal: (name: string, node: ReactNode) => void;
    updatePortal: (name: string, node: ReactNode) => void;
    removePortal: (name: string) => void;
};
export const usePortalState: (hostName: string) => import("../types").PortalType[];
enum ACTIONS {
    REGISTER_HOST = 0,
    DEREGISTER_HOST = 1,
    ADD_PORTAL = 2,
    UPDATE_PORTAL = 3,
    REMOVE_PORTAL = 4
}
const INITIAL_STATE: {};
export { ACTIONS, INITIAL_STATE };


export const reducer: (state: Record<string, Array<PortalType>>, action: ActionTypes) => Record<string, PortalType[]>;
interface PrintOptions {
    component?: string;
    method?: string;
    params?: Record<string, any> | string | number | boolean;
}
type Print = (options: PrintOptions) => void;
const enableLogging: () => void;
let print: Print;
export { print, enableLogging };
/**
 * The standard colors. Use those colors for consistency.
 *
 * @remarks
 * The colors automatically adapt to the Raycast theme (light or dark).
 *
 * @example
 * ```typescript
 * 
 *
 * export default function Command() {
 *  return (
 *  <List>
 *    <List.Item title="Blue" icon={{ source: Icon.Circle, tintColor: Color.Blue }} />
 *    <List.Item title="Green" icon={{ source: Icon.Circle, tintColor: Color.Green }} />
 *    <List.Item title="Brown" icon={{ source: Icon.Circle, tintColor: Color.Brown }} />
 *    <List.Item title="Magenta" icon={{ source: Icon.Circle, tintColor: Color.Magenta }} />
 *    <List.Item title="Orange" icon={{ source: Icon.Circle, tintColor: Color.Orange }} />
 *    <List.Item title="Purple" icon={{ source: Icon.Circle, tintColor: Color.Purple }} />
 *    <List.Item title="Red" icon={{ source: Icon.Circle, tintColor: Color.Red }} />
 *    <List.Item title="Yellow" icon={{ source: Icon.Circle, tintColor: Color.Yellow }} />
 *    <List.Item title="PrimaryText" icon={{ source: Icon.Circle, tintColor: Color.PrimaryText }} />
 *    <List.Item title="SecondaryText" icon={{ source: Icon.Circle, tintColor: Color.SecondaryText }} />
 *  </List>
 *  );
 * };
 * ```
 */
export enum Color {
    Blue = "raycast-blue",
    Brown = "raycast-brown",
    Green = "raycast-green",
    Magenta = "raycast-magenta",
    Orange = "raycast-orange",
    Purple = "raycast-purple",
    Red = "raycast-red",
    Yellow = "raycast-yellow",
    PrimaryText = "raycast-primary-text",
    SecondaryText = "raycast-secondary-text"
}
export namespace Color {
    /**
     * Union type for the supported color types.
     *
     * {@link Color.Raw} will be dynamically adjusted to achieve high contrast with the Raycast user interface.
     *
     * @example
     * ```typescript
     * 
     *
     * export default function Command() {
     *   return (
     *     <List>
     *       <List.Item title="Built-in color" icon={{ source: Icon.Circle, tintColor: Color.Red }} />
     *       <List.Item title="HEX" icon={{ source: Icon.Circle, tintColor: "#FF0000" }} />
     *       <List.Item title="Short HEX" icon={{ source: Icon.Circle, tintColor: "#F00" }} />
     *       <List.Item title="RGBA" icon={{ source: Icon.Circle, tintColor: "rgb(255, 0, 0)" }} />
     *       <List.Item title="RGBA Percentage" icon={{ source: Icon.Circle, tintColor: "rgb(255, 0, 0, 1.0)" }} />
     *       <List.Item title="HSL" icon={{ source: Icon.Circle, tintColor: "hsla(200, 20%, 33%, 0.2)" }} />
     *       <List.Item title="Keywords" icon={{ source: Icon.Circle, tintColor: "red" }} />
     *     </List>
     *   );
     * };
     * ```
     */
    type ColorLike = Color | Color.Dynamic | Color.Raw;
    /**
     * A dynamic color applies different colors depending on the active Raycast theme.
     *
     * @example
     * ```typescript
     * 
     *
     * export default function Command() {
     *  return (
     *  <List>
     *    <List.Item title="Dynamic Tint Color" icon={{ source: Icon.Circle, tintColor: { light: "#FF01FF", dark: "#FFFF50", adjustContrast: true } }} />
     *    <List.Item title="Dynamic Tint Color" icon={{ source: Icon.Circle, tintColor: { light: "#FF01FF", dark: "#FFFF50" } }} />
     *  </List>
     *  );
     * };
     * ```
     */
    interface Dynamic {
        /**
         * The color which is used in light theme.
         */
        light: Color.Raw;
        /**
         * The color which is used in dark theme.
         */
        dark: Color.Raw;
        /**
         * Enables dynamic contrast adjustment for light and dark theme color.
         *
         * @remarks
         * Colors different to the built-in {@link Color} can be dynamically adjusted to achieve high contrast with the
         * Raycast user interface. This makes it easy to guarantee a good look and feel when you aren't in control of the
         * color, e.g. get it via a network request.
         *
         * @defaultValue false
         */
        adjustContrast?: boolean;
    }
    /**
     * You can use any of the following color formats:
     * - HEX, e.g `#FF0000`
     * - Short HEX, e.g. `#F00`
     * - RGBA, e.g. `rgb(255, 0, 0)`
     * - RGBA Percentage, e.g. `rgb(255, 0, 0, 1.0)`
     * - HSL, e.g. `hsla(200, 20%, 33%, 0.2)`
     * - Keywords, e.g. `red`
     */
    type Raw = string;
}

/**
 * Creates and shows a confirmation Alert with the given options.
 *
 * @param options - The options used to create the Alert.
 * @returns A Promise that resolves to a boolean when the user takes an action.
 * It will be `true` for the primary Action, `false` for the dismiss Action.
 *
 * @example
 * ```typescript
 * 
 *
 * export default async () => {
 *   if (await confirmAlert({ title: "Are you sure?" })) {
 *     // do something
 *   }
 * };
 * ```
 */
export function confirmAlert(options: Alert.Options): Promise<boolean>;
export namespace Alert {
    /**
     * The options to create an {@link Alert}.
     *
     * @example
     * ```typescript
     * 
     *
     * export default async () => {
     *   const options: Alert.Options = {
     *     title: "Finished cooking",
     *     message: "Delicious pasta for lunch",
     *     primaryAction: {
     *       title: 'Do something',
     *       onAction: () => {
     *         // while you can register a handler for an action, it's more elegant
     *         // to use the `if (await confirmAlert(...)) { ... }` pattern
     *         console.log("The alert action has been triggered")
     *       }
     *     }
     *   };
     *   await confirmAlert(options);
     * };
     * ```
     */
    interface Options {
        /**
         * The icon of an alert to illustrate the action. Displayed on the top.
         */
        icon?: Image.ImageLike;
        /**
         * The title of an alert. Displayed below the icon.
         */
        title: string;
        /**
         * An additional message for an Alert. Useful to show more information, e.g. a confirmation message for a destructive action.
         */
        message?: string;
        /**
         * The primary Action the user can take.
         */
        primaryAction?: ActionOptions;
        /**
         * The Action to dismiss the alert. There usually shouldn't be any side effects when the user takes this action.
         */
        dismissAction?: ActionOptions;
    }
    /**
     * The options to create an {@link Alert} Action.
     */
    interface ActionOptions {
        /**
         * The title of the action.
         */
        title: string;
        /**
         * The style of the action.
         */
        style?: ActionStyle;
        /**
         * A callback called when the action is triggered.
         */
        onAction?: () => void;
    }
    /**
     * Defines the visual style of an Action of the Alert.
     *
     * @remarks
     * Use {@link Alert.ActionStyle.Default} for confirmations of a positive action.
     * Use {@link Alert.ActionStyle.Destructive} for confirmations of a destructive action (eg. deleting a file).
     */
    enum ActionStyle {
        Default = "DEFAULT",
        Cancel = "CANCEL",
        Destructive = "DESTRUCTIVE"
    }
}
/**
 * A HUD will automatically hide the main window and show a compact message at the bottom of the screen.
 *
 * @param title - The title that will be displayed for the HUD.
 * @returns A Promise that resolves when the HUD is shown.
 *
 * @example
 * ```typescript
 * 
 *
 * export default async () => {
 *   await showHUD("Hey there 👋");
 * };
 * ```
 */
export function showHUD(title: string): Promise<void>;

/**
 * Creates and shows a Toast with the given {@link Toast.Options}.
 *
 * @param options - The options to customize the Toast.
 * @returns A Promise that resolves with the shown Toast. The Toast can be used to change or hide it.
 *
 * @example
 * ```typescript
 * 
 *
 * export default async () => {
 *   const success = false;
 *
 *   if (success) {
 *     await showToast({ title: "Dinner is ready", message: "Pizza margherita" });
 *   } else {
 *     await showToast({ style: Toast.Style.Failure, title: "Dinner isn't ready", message: "Pizza dropped on the floor" });
 *   }
 * };
 * ```
 *
 * When showing an animated Toast, you can later on update it:
 * @example
 * ```typescript
 * 
 * 
 *
 * export default async () => {
 *   const toast = await showToast({ style: Toast.Style.Animated, title: "Uploading image" });
 *
 *   await setTimeout(1000);
 *
 *   toast.style = ToastStyle.Success;
 *   toast.title = "Uploaded image";
 *
 *   await setTimeout(500);
 *
 *   await toast.hide()
 * };
 * ```
 */
export function showToast(options: Toast.Options): Promise<Toast>;
export function showToast(style: Toast.Style, title: string, message?: string): Promise<Toast>;
/**
 * A Toast with a certain style, title, and message.
 *
 * @example
 * ```typescript
 * 
 * 
 *
 * export default async () => {
 *   const toast = await showToast({ style: Toast.Style.Animated, title: "Uploading image" });
 *
 *   await setTimeout(1000);
 *
 *   toast.style = Toast.Style.Success;
 *   toast.title = "Uploaded image";
 * };
 * ```
 */
export class Toast {
    private options;
    private id;
    private callbacks;
    constructor(props: Toast.Options);
    get style(): Toast.Style;
    set style(style: Toast.Style);
    get title(): string;
    set title(title: string);
    get message(): string | undefined;
    set message(message: string | undefined);
    get primaryAction(): Toast.ActionOptions | undefined;
    set primaryAction(action: Toast.ActionOptions | undefined);
    get secondaryAction(): Toast.ActionOptions | undefined;
    set secondaryAction(action: Toast.ActionOptions | undefined);
    /**
     * Shows the Toast.
     *
     * @returns A Promise that resolves when the toast is shown.
     */
    show(): Promise<void>;
    /**
     * Hides the Toast.
     *
     * @returns A Promise that resolves when toast is hidden.
     */
    hide(): Promise<void>;
    private update;
}
export namespace Toast {
    /**
     * The options to create a {@link Toast}.
     *
     * @example
     * ```typescript
     * 
     *
     * export default async () => {
     *   const options: Toast.Options = {
     *     style: Toast.Style.Success,
     *     title: "Finished cooking",
     *     message: "Delicious pasta for lunch",
     *     primaryAction: {
     *       title: 'Do something',
     *       onAction: () => {
     *         console.log("The toast action has been triggered")
     *       }
     *     }
     *   };
     *   await showToast(options);
     * };
     * ```
     */
    interface Options {
        /**
         * The title of a Toast. Displayed on the top.
         */
        title: string;
        /**
         * An additional message for the Toast. Useful to show more information, e.g. an identifier of a newly created asset.
         */
        message?: string;
        /**
         * The style of a Toast.
         */
        style?: Style;
        /**
         * The primary Action the user can take when hovering on the Toast.
         */
        primaryAction?: ActionOptions;
        /**
         * The secondary Action the user can take when hovering on the Toast.
         */
        secondaryAction?: ActionOptions;
    }
    /**
     * The options to create a {@link Toast} Action.
     */
    interface ActionOptions {
        /**
         * The title of the action.
         */
        title: string;
        /**
         * The keyboard shortcut for the action.
         */
        shortcut?: Keyboard.Shortcut;
        /**
         * A callback called when the action is triggered.
         */
        onAction: () => void;
    }
    /**
     * Defines the visual style of the Toast.
     *
     * @remarks
     * Use {@link Toast.Style.Success} for confirmations and {@link Toast.Style.Failure} for displaying errors.
     * Use {@link Toast.Style.Animated} when your Toast should be shown until a process is completed.
     * You can hide it later by using {@link Toast.hide} or update the properties of an existing Toast.
     */
    enum Style {
        Success = "SUCCESS",
        Failure = "FAILURE",
        Animated = "ANIMATED"
    }
}
/**
 * List of built-in icons that can be used for actions or list items.
 *
 * @example
 * ```typescript
 * 
 *
 * export default function Command() {
 *   return (
 *     <List>
 *       <List.Item title="Icon" icon={Icon.Circle} />
 *     </List>
 *   );
 * };
 * ```
 */
export enum Icon {
    ArrowClockwise = "arrow-clockwise-16",
    ArrowRight = "arrow-right-16",
    Binoculars = "binoculars-16",
    Bubble = "bubble-left-16",
    Calendar = "calendar-16",
    Checkmark = "checkmark-circle-16",
    ChevronDown = "chevron-down-16",
    ChevronUp = "chevron-up-16",
    Circle = "circle-16",
    Clipboard = "doc-on-clipboard-16",
    Clock = "clock-16",
    Desktop = "desktopcomputer-16",
    Document = "doc-16",
    Dot = "dot-16",
    Download = "square-and-arrow-down-16",
    Envelope = "envelope-16",
    ExclamationMark = "exclamation-mark-triangle-16",
    Eye = "eye-16",
    EyeSlash = "eye-slash-16",
    Finder = "finder-16",
    Gear = "gearshape-16",
    Globe = "globe-16",
    Hammer = "hammer-16",
    LevelMeter = "level-meter-16",
    Link = "link-16",
    List = "main-list-view-16",
    MagnifyingGlass = "magnifyingglass-16",
    MemoryChip = "memorychip-16",
    Message = "message-16",
    Pencil = "pencil-16",
    Person = "person-crop-circle-16",
    Phone = "phone-16",
    Pin = "pin-16",
    Plus = "plus-16",
    Sidebar = "sidebar-right-16",
    SpeakerArrowDown = "speaker-arrow-down-16",
    SpeakerArrowUp = "speaker-arrow-up-16",
    SpeakerSlash = "speaker-slash-16",
    Star = "star-16",
    Text = "text-alignleft-16",
    TextDocument = "doc-plaintext-16",
    QuestionMark = "questionmark-circle-16",
    Terminal = "terminal-16",
    Trash = "trash-16",
    Upload = "square-and-arrow-up-16",
    Video = "video-16",
    Window = "macwindow-16",
    XmarkCircle = "xmark-circle-16"
}
/**
 * An icon as it's used in the Finder.
 *
 * @example
 * ```typescript
 * 
 *
 * export default function Command() {
 *   return (
 *     <List>
 *       <List.Item title="File icon" icon={{ fileIcon: __filename }} />
 *     </List>
 *   );
 * };
 * ```
 */
export interface FileIcon {
    /**
     * The path to a file or folder to get its icon from.
     */
    fileIcon: string;
}


/**
 * Display different types of images, including network images or bundled assets.
 *
 * @example
 * ```typescript
 * // Built-in icon
 * const icon = Icon.Eye
 *
 * // Built-in icon with tint color
 * const tintedIcon = { source: Icon.Bubble, tintColor: Color.Red }
 *
 * // Bundled asset with circular mask
 * const avatar = { source: "avatar.png", mask: Image.Mask.Circle }
 *
 * // Theme-aware icon
 * const icon = { source: { light: "icon-light.png", dark: "icon-dark.png" }}
 * ```
 *
 * @remark
 * Apply image transforms to the source, such as a `mask` or a `tintColor`.
 */
export interface Image {
    /**
     * The {@link Image.Source} of the image.
     */
    source: Image.Source;
    /**
     * {@link Image.Fallback} image, in case `source` can't be loaded.
     */
    fallback?: Image.Fallback;
    /**
     * A {@link Image.Mask} to apply to the image.
     */
    mask?: Image.Mask;
    /**
     * A {@link Color.ColorLike} to tint all the non-transparent pixels of the image.
     */
    tintColor?: Color.ColorLike;
}
export namespace Image {
    /**
     * Image is a string representing a URL.
     */
    type URL = string;
    /**
     * Image is a string denoting an asset from the `assets/` folder.
     */
    type Asset = string;
    /**
     * Union type for the supported image types.
     *
     * @example
     * ```typescript
     * 
     *
     * export default function Command() {
     *   return (
     *     <List>
     *       <List.Item title="String" icon="https://raycast.com/uploads/avatar.png" />
     *       <List.Item title="Icon" icon={Icon.Circle} />
     *       <List.Item title="FileIcon" icon={{ fileIcon: __filename }} />
     *       <List.Item title="Image" icon={{ source: "https://raycast.com/uploads/avatar.png", mask: Image.Mask.Circle }} />
     *     </List>
     *   );
     * };
     * ```
     */
    type ImageLike = URL | Asset | Icon | FileIcon | Image;
    /**
     * The source of an {@link Image}. Can be either a remote URL, a local file resource, a built-in {@link Icon} or
     * a single emoji.
     *
     * @remarks
     * For consistency, it's best to use the built-in {@link Icon} in lists, the Action Panel, and other places. If a
     * specific icon isn't built-in, you can reference custom ones from the `assets` folder of the extension by file name,
     * e.g. `my-icon.png`. Alternatively, you can reference an absolute HTTPS URL that points to an image or use an emoji.
     * You can also specify different remote or local assets for light and dark theme.
     *
     * @example
     * ```typescript
     * 
     *
     * export default function Command() {
     *   return (
     *     <List>
     *       <List.Item title="String" icon={{ source: "https://raycast.com/uploads/avatar.png" }} />
     *       <List.Item title="Icon" icon={{ source: Icon.Circle }} />
     *       <List.Item
     *         title="Theme"
     *         icon={{
     *           source: { light: "https://raycast.com/uploads/avatar.png", dark: "https://raycast.com/uploads/avatar.png" },
     *         }}
     *       />
     *     </List>
     *   );
     * };
     * ```
     */
    type Source = URL | Asset | Icon | {
        light: URL | Asset;
        dark: URL | Asset;
    };
    /**
     * Fallback {@link Image} source. Can be a local file resource, a built-in {@link Icon} or a single emoji.
     *
     * @example
     * ```typescript
     * 
     *
     * export default function Command() {
     *   return (
     *     <List>
     *       <List.Item title="String" icon={{ source: "https://raycast.com/uploads/avatar.png", fallback: Icon.Circle }} />
     *       <List.Item title="Icon" icon={{ source: Icon.Circle }} />
     *       <List.Item
     *         title="Theme"
     *         icon={{
     *           source: { light: "https://raycast.com/uploads/avatar.png", dark: "https://raycast.com/uploads/avatar.png" },
     *         }}
     *       />
     *     </List>
     *   );
     * };
     * ```
     */
    type Fallback = Asset | Icon | {
        light: Asset;
        dark: Asset;
    };
    /**
     * Available masks that can be used to change the shape of an image.
     *
     * @remarks
     * Can be handy to shape avatars or other items in a list.
     *
     * @example
     * ```typescript
     * 
     *
     * export default function Command() {
     *   return (
     *     <List>
     *       <List.Item title="Icon" icon={{ source: "https://raycast.com/uploads/avatar.png", mask: Image.Mask.Circle }} />
     *     </List>
     *   );
     * };
     * ```
     */
    enum Mask {
        /**
         * Masks an image with a circle. Good to use for avatars.
         */
        Circle = "circle",
        /**
         * Masks an image with a rounded rectangle.
         */
        RoundedRectangle = "roundedRectangle"
    }
}
   
}
